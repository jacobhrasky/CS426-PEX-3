/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  CS426.analysis;

namespace CS426.node {

public abstract class PFile : Node
{
}

public abstract class PConstDeclarations : Node
{
}

public abstract class PFunctDeclarations : Node
{
}

public abstract class PMainDeclaration : Node
{
}

public abstract class PBoolExp : Node
{
}

public abstract class PBoolTerm : Node
{
}

public abstract class PBoolNot : Node
{
}

public abstract class PBoolComp : Node
{
}

public abstract class PBoolParens : Node
{
}

public abstract class PNumComp : Node
{
}

public abstract class PExpression : Node
{
}

public abstract class PTerm : Node
{
}

public abstract class PNegation : Node
{
}

public abstract class PParentheticalExp : Node
{
}

public abstract class POperand : Node
{
}

public abstract class PLiteral : Node
{
}

public abstract class PParamDeclarations : Node
{
}

public abstract class PParamDeclaration : Node
{
}

public abstract class PStatements : Node
{
}

public abstract class PStatement : Node
{
}

public abstract class PVarDec : Node
{
}

public abstract class POptAssignment : Node
{
}

public abstract class PFunctCall : Node
{
}

public abstract class PCallParams : Node
{
}

public abstract class PAssignment : Node
{
}

public abstract class PIfStmt : Node
{
}

public abstract class PElseStmt : Node
{
}

public abstract class PLoopStmt : Node
{
}


public sealed class AFile : PFile
{
    private PConstDeclarations _const_declarations_;
    private PFunctDeclarations _funct_declarations_;
    private PMainDeclaration _main_declaration_;

    public AFile ()
    {
    }

    public AFile (
            PConstDeclarations _const_declarations_,
            PFunctDeclarations _funct_declarations_,
            PMainDeclaration _main_declaration_
    )
    {
        SetConstDeclarations (_const_declarations_);
        SetFunctDeclarations (_funct_declarations_);
        SetMainDeclaration (_main_declaration_);
    }

    public override Object Clone()
    {
        return new AFile (
            (PConstDeclarations)CloneNode (_const_declarations_),
            (PFunctDeclarations)CloneNode (_funct_declarations_),
            (PMainDeclaration)CloneNode (_main_declaration_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFile(this);
    }

    public PConstDeclarations GetConstDeclarations ()
    {
        return _const_declarations_;
    }

    public void SetConstDeclarations (PConstDeclarations node)
    {
        if(_const_declarations_ != null)
        {
            _const_declarations_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _const_declarations_ = node;
    }
    public PFunctDeclarations GetFunctDeclarations ()
    {
        return _funct_declarations_;
    }

    public void SetFunctDeclarations (PFunctDeclarations node)
    {
        if(_funct_declarations_ != null)
        {
            _funct_declarations_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _funct_declarations_ = node;
    }
    public PMainDeclaration GetMainDeclaration ()
    {
        return _main_declaration_;
    }

    public void SetMainDeclaration (PMainDeclaration node)
    {
        if(_main_declaration_ != null)
        {
            _main_declaration_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_declaration_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_const_declarations_)
            + ToString (_funct_declarations_)
            + ToString (_main_declaration_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _const_declarations_ == child )
        {
            _const_declarations_ = null;
            return;
        }
        if ( _funct_declarations_ == child )
        {
            _funct_declarations_ = null;
            return;
        }
        if ( _main_declaration_ == child )
        {
            _main_declaration_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _const_declarations_ == oldChild )
        {
            SetConstDeclarations ((PConstDeclarations) newChild);
            return;
        }
        if ( _funct_declarations_ == oldChild )
        {
            SetFunctDeclarations ((PFunctDeclarations) newChild);
            return;
        }
        if ( _main_declaration_ == oldChild )
        {
            SetMainDeclaration ((PMainDeclaration) newChild);
            return;
        }
    }

}
public sealed class ASomeConstDeclarations : PConstDeclarations
{
    private TRwConst _rw_const_;
    private TRwType _rw_type_;
    private TId _id_;
    private TAssign _assign_;
    private PExpression _expression_;
    private TSemiColon _semi_colon_;
    private PConstDeclarations _const_declarations_;

    public ASomeConstDeclarations ()
    {
    }

    public ASomeConstDeclarations (
            TRwConst _rw_const_,
            TRwType _rw_type_,
            TId _id_,
            TAssign _assign_,
            PExpression _expression_,
            TSemiColon _semi_colon_,
            PConstDeclarations _const_declarations_
    )
    {
        SetRwConst (_rw_const_);
        SetRwType (_rw_type_);
        SetId (_id_);
        SetAssign (_assign_);
        SetExpression (_expression_);
        SetSemiColon (_semi_colon_);
        SetConstDeclarations (_const_declarations_);
    }

    public override Object Clone()
    {
        return new ASomeConstDeclarations (
            (TRwConst)CloneNode (_rw_const_),
            (TRwType)CloneNode (_rw_type_),
            (TId)CloneNode (_id_),
            (TAssign)CloneNode (_assign_),
            (PExpression)CloneNode (_expression_),
            (TSemiColon)CloneNode (_semi_colon_),
            (PConstDeclarations)CloneNode (_const_declarations_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASomeConstDeclarations(this);
    }

    public TRwConst GetRwConst ()
    {
        return _rw_const_;
    }

    public void SetRwConst (TRwConst node)
    {
        if(_rw_const_ != null)
        {
            _rw_const_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rw_const_ = node;
    }
    public TRwType GetRwType ()
    {
        return _rw_type_;
    }

    public void SetRwType (TRwType node)
    {
        if(_rw_type_ != null)
        {
            _rw_type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rw_type_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TSemiColon GetSemiColon ()
    {
        return _semi_colon_;
    }

    public void SetSemiColon (TSemiColon node)
    {
        if(_semi_colon_ != null)
        {
            _semi_colon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semi_colon_ = node;
    }
    public PConstDeclarations GetConstDeclarations ()
    {
        return _const_declarations_;
    }

    public void SetConstDeclarations (PConstDeclarations node)
    {
        if(_const_declarations_ != null)
        {
            _const_declarations_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _const_declarations_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_rw_const_)
            + ToString (_rw_type_)
            + ToString (_id_)
            + ToString (_assign_)
            + ToString (_expression_)
            + ToString (_semi_colon_)
            + ToString (_const_declarations_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _rw_const_ == child )
        {
            _rw_const_ = null;
            return;
        }
        if ( _rw_type_ == child )
        {
            _rw_type_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _semi_colon_ == child )
        {
            _semi_colon_ = null;
            return;
        }
        if ( _const_declarations_ == child )
        {
            _const_declarations_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _rw_const_ == oldChild )
        {
            SetRwConst ((TRwConst) newChild);
            return;
        }
        if ( _rw_type_ == oldChild )
        {
            SetRwType ((TRwType) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _semi_colon_ == oldChild )
        {
            SetSemiColon ((TSemiColon) newChild);
            return;
        }
        if ( _const_declarations_ == oldChild )
        {
            SetConstDeclarations ((PConstDeclarations) newChild);
            return;
        }
    }

}
public sealed class ANoneConstDeclarations : PConstDeclarations
{


    public ANoneConstDeclarations (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneConstDeclarations (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneConstDeclarations(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ASomeFunctDeclarations : PFunctDeclarations
{
    private PFunctDeclarations _funct_declarations_;
    private TRwFunction _rw_function_;
    private TId _id_;
    private TLParen _l_paren_;
    private PParamDeclarations _param_declarations_;
    private TRParen _r_paren_;
    private TLBrace _l_brace_;
    private PStatements _statements_;
    private TRBrace _r_brace_;

    public ASomeFunctDeclarations ()
    {
    }

    public ASomeFunctDeclarations (
            PFunctDeclarations _funct_declarations_,
            TRwFunction _rw_function_,
            TId _id_,
            TLParen _l_paren_,
            PParamDeclarations _param_declarations_,
            TRParen _r_paren_,
            TLBrace _l_brace_,
            PStatements _statements_,
            TRBrace _r_brace_
    )
    {
        SetFunctDeclarations (_funct_declarations_);
        SetRwFunction (_rw_function_);
        SetId (_id_);
        SetLParen (_l_paren_);
        SetParamDeclarations (_param_declarations_);
        SetRParen (_r_paren_);
        SetLBrace (_l_brace_);
        SetStatements (_statements_);
        SetRBrace (_r_brace_);
    }

    public override Object Clone()
    {
        return new ASomeFunctDeclarations (
            (PFunctDeclarations)CloneNode (_funct_declarations_),
            (TRwFunction)CloneNode (_rw_function_),
            (TId)CloneNode (_id_),
            (TLParen)CloneNode (_l_paren_),
            (PParamDeclarations)CloneNode (_param_declarations_),
            (TRParen)CloneNode (_r_paren_),
            (TLBrace)CloneNode (_l_brace_),
            (PStatements)CloneNode (_statements_),
            (TRBrace)CloneNode (_r_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASomeFunctDeclarations(this);
    }

    public PFunctDeclarations GetFunctDeclarations ()
    {
        return _funct_declarations_;
    }

    public void SetFunctDeclarations (PFunctDeclarations node)
    {
        if(_funct_declarations_ != null)
        {
            _funct_declarations_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _funct_declarations_ = node;
    }
    public TRwFunction GetRwFunction ()
    {
        return _rw_function_;
    }

    public void SetRwFunction (TRwFunction node)
    {
        if(_rw_function_ != null)
        {
            _rw_function_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rw_function_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TLParen GetLParen ()
    {
        return _l_paren_;
    }

    public void SetLParen (TLParen node)
    {
        if(_l_paren_ != null)
        {
            _l_paren_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_paren_ = node;
    }
    public PParamDeclarations GetParamDeclarations ()
    {
        return _param_declarations_;
    }

    public void SetParamDeclarations (PParamDeclarations node)
    {
        if(_param_declarations_ != null)
        {
            _param_declarations_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _param_declarations_ = node;
    }
    public TRParen GetRParen ()
    {
        return _r_paren_;
    }

    public void SetRParen (TRParen node)
    {
        if(_r_paren_ != null)
        {
            _r_paren_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_paren_ = node;
    }
    public TLBrace GetLBrace ()
    {
        return _l_brace_;
    }

    public void SetLBrace (TLBrace node)
    {
        if(_l_brace_ != null)
        {
            _l_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_brace_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TRBrace GetRBrace ()
    {
        return _r_brace_;
    }

    public void SetRBrace (TRBrace node)
    {
        if(_r_brace_ != null)
        {
            _r_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_funct_declarations_)
            + ToString (_rw_function_)
            + ToString (_id_)
            + ToString (_l_paren_)
            + ToString (_param_declarations_)
            + ToString (_r_paren_)
            + ToString (_l_brace_)
            + ToString (_statements_)
            + ToString (_r_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _funct_declarations_ == child )
        {
            _funct_declarations_ = null;
            return;
        }
        if ( _rw_function_ == child )
        {
            _rw_function_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _l_paren_ == child )
        {
            _l_paren_ = null;
            return;
        }
        if ( _param_declarations_ == child )
        {
            _param_declarations_ = null;
            return;
        }
        if ( _r_paren_ == child )
        {
            _r_paren_ = null;
            return;
        }
        if ( _l_brace_ == child )
        {
            _l_brace_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _r_brace_ == child )
        {
            _r_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _funct_declarations_ == oldChild )
        {
            SetFunctDeclarations ((PFunctDeclarations) newChild);
            return;
        }
        if ( _rw_function_ == oldChild )
        {
            SetRwFunction ((TRwFunction) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _l_paren_ == oldChild )
        {
            SetLParen ((TLParen) newChild);
            return;
        }
        if ( _param_declarations_ == oldChild )
        {
            SetParamDeclarations ((PParamDeclarations) newChild);
            return;
        }
        if ( _r_paren_ == oldChild )
        {
            SetRParen ((TRParen) newChild);
            return;
        }
        if ( _l_brace_ == oldChild )
        {
            SetLBrace ((TLBrace) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _r_brace_ == oldChild )
        {
            SetRBrace ((TRBrace) newChild);
            return;
        }
    }

}
public sealed class ANoneFunctDeclarations : PFunctDeclarations
{


    public ANoneFunctDeclarations (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneFunctDeclarations (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneFunctDeclarations(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AMainDeclaration : PMainDeclaration
{
    private TRwFunction _rw_function_;
    private TRwMain _rw_main_;
    private TLParen _l_paren_;
    private TRParen _r_paren_;
    private TLBrace _l_brace_;
    private PStatements _statements_;
    private TRBrace _r_brace_;

    public AMainDeclaration ()
    {
    }

    public AMainDeclaration (
            TRwFunction _rw_function_,
            TRwMain _rw_main_,
            TLParen _l_paren_,
            TRParen _r_paren_,
            TLBrace _l_brace_,
            PStatements _statements_,
            TRBrace _r_brace_
    )
    {
        SetRwFunction (_rw_function_);
        SetRwMain (_rw_main_);
        SetLParen (_l_paren_);
        SetRParen (_r_paren_);
        SetLBrace (_l_brace_);
        SetStatements (_statements_);
        SetRBrace (_r_brace_);
    }

    public override Object Clone()
    {
        return new AMainDeclaration (
            (TRwFunction)CloneNode (_rw_function_),
            (TRwMain)CloneNode (_rw_main_),
            (TLParen)CloneNode (_l_paren_),
            (TRParen)CloneNode (_r_paren_),
            (TLBrace)CloneNode (_l_brace_),
            (PStatements)CloneNode (_statements_),
            (TRBrace)CloneNode (_r_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMainDeclaration(this);
    }

    public TRwFunction GetRwFunction ()
    {
        return _rw_function_;
    }

    public void SetRwFunction (TRwFunction node)
    {
        if(_rw_function_ != null)
        {
            _rw_function_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rw_function_ = node;
    }
    public TRwMain GetRwMain ()
    {
        return _rw_main_;
    }

    public void SetRwMain (TRwMain node)
    {
        if(_rw_main_ != null)
        {
            _rw_main_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rw_main_ = node;
    }
    public TLParen GetLParen ()
    {
        return _l_paren_;
    }

    public void SetLParen (TLParen node)
    {
        if(_l_paren_ != null)
        {
            _l_paren_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_paren_ = node;
    }
    public TRParen GetRParen ()
    {
        return _r_paren_;
    }

    public void SetRParen (TRParen node)
    {
        if(_r_paren_ != null)
        {
            _r_paren_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_paren_ = node;
    }
    public TLBrace GetLBrace ()
    {
        return _l_brace_;
    }

    public void SetLBrace (TLBrace node)
    {
        if(_l_brace_ != null)
        {
            _l_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_brace_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TRBrace GetRBrace ()
    {
        return _r_brace_;
    }

    public void SetRBrace (TRBrace node)
    {
        if(_r_brace_ != null)
        {
            _r_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_rw_function_)
            + ToString (_rw_main_)
            + ToString (_l_paren_)
            + ToString (_r_paren_)
            + ToString (_l_brace_)
            + ToString (_statements_)
            + ToString (_r_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _rw_function_ == child )
        {
            _rw_function_ = null;
            return;
        }
        if ( _rw_main_ == child )
        {
            _rw_main_ = null;
            return;
        }
        if ( _l_paren_ == child )
        {
            _l_paren_ = null;
            return;
        }
        if ( _r_paren_ == child )
        {
            _r_paren_ = null;
            return;
        }
        if ( _l_brace_ == child )
        {
            _l_brace_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _r_brace_ == child )
        {
            _r_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _rw_function_ == oldChild )
        {
            SetRwFunction ((TRwFunction) newChild);
            return;
        }
        if ( _rw_main_ == oldChild )
        {
            SetRwMain ((TRwMain) newChild);
            return;
        }
        if ( _l_paren_ == oldChild )
        {
            SetLParen ((TLParen) newChild);
            return;
        }
        if ( _r_paren_ == oldChild )
        {
            SetRParen ((TRParen) newChild);
            return;
        }
        if ( _l_brace_ == oldChild )
        {
            SetLBrace ((TLBrace) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _r_brace_ == oldChild )
        {
            SetRBrace ((TRBrace) newChild);
            return;
        }
    }

}
public sealed class AMultBoolExp : PBoolExp
{
    private PBoolExp _bool_exp_;
    private TOrSign _or_sign_;
    private PBoolTerm _bool_term_;

    public AMultBoolExp ()
    {
    }

    public AMultBoolExp (
            PBoolExp _bool_exp_,
            TOrSign _or_sign_,
            PBoolTerm _bool_term_
    )
    {
        SetBoolExp (_bool_exp_);
        SetOrSign (_or_sign_);
        SetBoolTerm (_bool_term_);
    }

    public override Object Clone()
    {
        return new AMultBoolExp (
            (PBoolExp)CloneNode (_bool_exp_),
            (TOrSign)CloneNode (_or_sign_),
            (PBoolTerm)CloneNode (_bool_term_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultBoolExp(this);
    }

    public PBoolExp GetBoolExp ()
    {
        return _bool_exp_;
    }

    public void SetBoolExp (PBoolExp node)
    {
        if(_bool_exp_ != null)
        {
            _bool_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bool_exp_ = node;
    }
    public TOrSign GetOrSign ()
    {
        return _or_sign_;
    }

    public void SetOrSign (TOrSign node)
    {
        if(_or_sign_ != null)
        {
            _or_sign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_sign_ = node;
    }
    public PBoolTerm GetBoolTerm ()
    {
        return _bool_term_;
    }

    public void SetBoolTerm (PBoolTerm node)
    {
        if(_bool_term_ != null)
        {
            _bool_term_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bool_term_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_bool_exp_)
            + ToString (_or_sign_)
            + ToString (_bool_term_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _bool_exp_ == child )
        {
            _bool_exp_ = null;
            return;
        }
        if ( _or_sign_ == child )
        {
            _or_sign_ = null;
            return;
        }
        if ( _bool_term_ == child )
        {
            _bool_term_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _bool_exp_ == oldChild )
        {
            SetBoolExp ((PBoolExp) newChild);
            return;
        }
        if ( _or_sign_ == oldChild )
        {
            SetOrSign ((TOrSign) newChild);
            return;
        }
        if ( _bool_term_ == oldChild )
        {
            SetBoolTerm ((PBoolTerm) newChild);
            return;
        }
    }

}
public sealed class ASingleBoolExp : PBoolExp
{
    private PBoolTerm _bool_term_;

    public ASingleBoolExp ()
    {
    }

    public ASingleBoolExp (
            PBoolTerm _bool_term_
    )
    {
        SetBoolTerm (_bool_term_);
    }

    public override Object Clone()
    {
        return new ASingleBoolExp (
            (PBoolTerm)CloneNode (_bool_term_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleBoolExp(this);
    }

    public PBoolTerm GetBoolTerm ()
    {
        return _bool_term_;
    }

    public void SetBoolTerm (PBoolTerm node)
    {
        if(_bool_term_ != null)
        {
            _bool_term_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bool_term_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_bool_term_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _bool_term_ == child )
        {
            _bool_term_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _bool_term_ == oldChild )
        {
            SetBoolTerm ((PBoolTerm) newChild);
            return;
        }
    }

}
public sealed class AMultBoolTerm : PBoolTerm
{
    private PBoolTerm _bool_term_;
    private TAndSign _and_sign_;
    private PBoolNot _bool_not_;

    public AMultBoolTerm ()
    {
    }

    public AMultBoolTerm (
            PBoolTerm _bool_term_,
            TAndSign _and_sign_,
            PBoolNot _bool_not_
    )
    {
        SetBoolTerm (_bool_term_);
        SetAndSign (_and_sign_);
        SetBoolNot (_bool_not_);
    }

    public override Object Clone()
    {
        return new AMultBoolTerm (
            (PBoolTerm)CloneNode (_bool_term_),
            (TAndSign)CloneNode (_and_sign_),
            (PBoolNot)CloneNode (_bool_not_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultBoolTerm(this);
    }

    public PBoolTerm GetBoolTerm ()
    {
        return _bool_term_;
    }

    public void SetBoolTerm (PBoolTerm node)
    {
        if(_bool_term_ != null)
        {
            _bool_term_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bool_term_ = node;
    }
    public TAndSign GetAndSign ()
    {
        return _and_sign_;
    }

    public void SetAndSign (TAndSign node)
    {
        if(_and_sign_ != null)
        {
            _and_sign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _and_sign_ = node;
    }
    public PBoolNot GetBoolNot ()
    {
        return _bool_not_;
    }

    public void SetBoolNot (PBoolNot node)
    {
        if(_bool_not_ != null)
        {
            _bool_not_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bool_not_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_bool_term_)
            + ToString (_and_sign_)
            + ToString (_bool_not_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _bool_term_ == child )
        {
            _bool_term_ = null;
            return;
        }
        if ( _and_sign_ == child )
        {
            _and_sign_ = null;
            return;
        }
        if ( _bool_not_ == child )
        {
            _bool_not_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _bool_term_ == oldChild )
        {
            SetBoolTerm ((PBoolTerm) newChild);
            return;
        }
        if ( _and_sign_ == oldChild )
        {
            SetAndSign ((TAndSign) newChild);
            return;
        }
        if ( _bool_not_ == oldChild )
        {
            SetBoolNot ((PBoolNot) newChild);
            return;
        }
    }

}
public sealed class ASingleBoolTerm : PBoolTerm
{
    private PBoolNot _bool_not_;

    public ASingleBoolTerm ()
    {
    }

    public ASingleBoolTerm (
            PBoolNot _bool_not_
    )
    {
        SetBoolNot (_bool_not_);
    }

    public override Object Clone()
    {
        return new ASingleBoolTerm (
            (PBoolNot)CloneNode (_bool_not_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleBoolTerm(this);
    }

    public PBoolNot GetBoolNot ()
    {
        return _bool_not_;
    }

    public void SetBoolNot (PBoolNot node)
    {
        if(_bool_not_ != null)
        {
            _bool_not_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bool_not_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_bool_not_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _bool_not_ == child )
        {
            _bool_not_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _bool_not_ == oldChild )
        {
            SetBoolNot ((PBoolNot) newChild);
            return;
        }
    }

}
public sealed class ANegBoolNot : PBoolNot
{
    private TNotSign _not_sign_;
    private PBoolComp _bool_comp_;

    public ANegBoolNot ()
    {
    }

    public ANegBoolNot (
            TNotSign _not_sign_,
            PBoolComp _bool_comp_
    )
    {
        SetNotSign (_not_sign_);
        SetBoolComp (_bool_comp_);
    }

    public override Object Clone()
    {
        return new ANegBoolNot (
            (TNotSign)CloneNode (_not_sign_),
            (PBoolComp)CloneNode (_bool_comp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANegBoolNot(this);
    }

    public TNotSign GetNotSign ()
    {
        return _not_sign_;
    }

    public void SetNotSign (TNotSign node)
    {
        if(_not_sign_ != null)
        {
            _not_sign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _not_sign_ = node;
    }
    public PBoolComp GetBoolComp ()
    {
        return _bool_comp_;
    }

    public void SetBoolComp (PBoolComp node)
    {
        if(_bool_comp_ != null)
        {
            _bool_comp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bool_comp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_not_sign_)
            + ToString (_bool_comp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _not_sign_ == child )
        {
            _not_sign_ = null;
            return;
        }
        if ( _bool_comp_ == child )
        {
            _bool_comp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _not_sign_ == oldChild )
        {
            SetNotSign ((TNotSign) newChild);
            return;
        }
        if ( _bool_comp_ == oldChild )
        {
            SetBoolComp ((PBoolComp) newChild);
            return;
        }
    }

}
public sealed class APosBoolNot : PBoolNot
{
    private PBoolComp _bool_comp_;

    public APosBoolNot ()
    {
    }

    public APosBoolNot (
            PBoolComp _bool_comp_
    )
    {
        SetBoolComp (_bool_comp_);
    }

    public override Object Clone()
    {
        return new APosBoolNot (
            (PBoolComp)CloneNode (_bool_comp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPosBoolNot(this);
    }

    public PBoolComp GetBoolComp ()
    {
        return _bool_comp_;
    }

    public void SetBoolComp (PBoolComp node)
    {
        if(_bool_comp_ != null)
        {
            _bool_comp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bool_comp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_bool_comp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _bool_comp_ == child )
        {
            _bool_comp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _bool_comp_ == oldChild )
        {
            SetBoolComp ((PBoolComp) newChild);
            return;
        }
    }

}
public sealed class AEqualBoolComp : PBoolComp
{
    private PBoolComp _bool_comp_;
    private TEqSign _eq_sign_;
    private PBoolParens _bool_parens_;

    public AEqualBoolComp ()
    {
    }

    public AEqualBoolComp (
            PBoolComp _bool_comp_,
            TEqSign _eq_sign_,
            PBoolParens _bool_parens_
    )
    {
        SetBoolComp (_bool_comp_);
        SetEqSign (_eq_sign_);
        SetBoolParens (_bool_parens_);
    }

    public override Object Clone()
    {
        return new AEqualBoolComp (
            (PBoolComp)CloneNode (_bool_comp_),
            (TEqSign)CloneNode (_eq_sign_),
            (PBoolParens)CloneNode (_bool_parens_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEqualBoolComp(this);
    }

    public PBoolComp GetBoolComp ()
    {
        return _bool_comp_;
    }

    public void SetBoolComp (PBoolComp node)
    {
        if(_bool_comp_ != null)
        {
            _bool_comp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bool_comp_ = node;
    }
    public TEqSign GetEqSign ()
    {
        return _eq_sign_;
    }

    public void SetEqSign (TEqSign node)
    {
        if(_eq_sign_ != null)
        {
            _eq_sign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eq_sign_ = node;
    }
    public PBoolParens GetBoolParens ()
    {
        return _bool_parens_;
    }

    public void SetBoolParens (PBoolParens node)
    {
        if(_bool_parens_ != null)
        {
            _bool_parens_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bool_parens_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_bool_comp_)
            + ToString (_eq_sign_)
            + ToString (_bool_parens_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _bool_comp_ == child )
        {
            _bool_comp_ = null;
            return;
        }
        if ( _eq_sign_ == child )
        {
            _eq_sign_ = null;
            return;
        }
        if ( _bool_parens_ == child )
        {
            _bool_parens_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _bool_comp_ == oldChild )
        {
            SetBoolComp ((PBoolComp) newChild);
            return;
        }
        if ( _eq_sign_ == oldChild )
        {
            SetEqSign ((TEqSign) newChild);
            return;
        }
        if ( _bool_parens_ == oldChild )
        {
            SetBoolParens ((PBoolParens) newChild);
            return;
        }
    }

}
public sealed class ANotEqualBoolComp : PBoolComp
{
    private PBoolComp _bool_comp_;
    private TNeqSign _neq_sign_;
    private PBoolParens _bool_parens_;

    public ANotEqualBoolComp ()
    {
    }

    public ANotEqualBoolComp (
            PBoolComp _bool_comp_,
            TNeqSign _neq_sign_,
            PBoolParens _bool_parens_
    )
    {
        SetBoolComp (_bool_comp_);
        SetNeqSign (_neq_sign_);
        SetBoolParens (_bool_parens_);
    }

    public override Object Clone()
    {
        return new ANotEqualBoolComp (
            (PBoolComp)CloneNode (_bool_comp_),
            (TNeqSign)CloneNode (_neq_sign_),
            (PBoolParens)CloneNode (_bool_parens_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANotEqualBoolComp(this);
    }

    public PBoolComp GetBoolComp ()
    {
        return _bool_comp_;
    }

    public void SetBoolComp (PBoolComp node)
    {
        if(_bool_comp_ != null)
        {
            _bool_comp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bool_comp_ = node;
    }
    public TNeqSign GetNeqSign ()
    {
        return _neq_sign_;
    }

    public void SetNeqSign (TNeqSign node)
    {
        if(_neq_sign_ != null)
        {
            _neq_sign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _neq_sign_ = node;
    }
    public PBoolParens GetBoolParens ()
    {
        return _bool_parens_;
    }

    public void SetBoolParens (PBoolParens node)
    {
        if(_bool_parens_ != null)
        {
            _bool_parens_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bool_parens_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_bool_comp_)
            + ToString (_neq_sign_)
            + ToString (_bool_parens_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _bool_comp_ == child )
        {
            _bool_comp_ = null;
            return;
        }
        if ( _neq_sign_ == child )
        {
            _neq_sign_ = null;
            return;
        }
        if ( _bool_parens_ == child )
        {
            _bool_parens_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _bool_comp_ == oldChild )
        {
            SetBoolComp ((PBoolComp) newChild);
            return;
        }
        if ( _neq_sign_ == oldChild )
        {
            SetNeqSign ((TNeqSign) newChild);
            return;
        }
        if ( _bool_parens_ == oldChild )
        {
            SetBoolParens ((PBoolParens) newChild);
            return;
        }
    }

}
public sealed class ASoloBoolComp : PBoolComp
{
    private PBoolParens _bool_parens_;

    public ASoloBoolComp ()
    {
    }

    public ASoloBoolComp (
            PBoolParens _bool_parens_
    )
    {
        SetBoolParens (_bool_parens_);
    }

    public override Object Clone()
    {
        return new ASoloBoolComp (
            (PBoolParens)CloneNode (_bool_parens_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASoloBoolComp(this);
    }

    public PBoolParens GetBoolParens ()
    {
        return _bool_parens_;
    }

    public void SetBoolParens (PBoolParens node)
    {
        if(_bool_parens_ != null)
        {
            _bool_parens_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bool_parens_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_bool_parens_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _bool_parens_ == child )
        {
            _bool_parens_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _bool_parens_ == oldChild )
        {
            SetBoolParens ((PBoolParens) newChild);
            return;
        }
    }

}
public sealed class ASomeBoolParens : PBoolParens
{
    private TLParen _l_paren_;
    private PBoolExp _bool_exp_;
    private TRParen _r_paren_;

    public ASomeBoolParens ()
    {
    }

    public ASomeBoolParens (
            TLParen _l_paren_,
            PBoolExp _bool_exp_,
            TRParen _r_paren_
    )
    {
        SetLParen (_l_paren_);
        SetBoolExp (_bool_exp_);
        SetRParen (_r_paren_);
    }

    public override Object Clone()
    {
        return new ASomeBoolParens (
            (TLParen)CloneNode (_l_paren_),
            (PBoolExp)CloneNode (_bool_exp_),
            (TRParen)CloneNode (_r_paren_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASomeBoolParens(this);
    }

    public TLParen GetLParen ()
    {
        return _l_paren_;
    }

    public void SetLParen (TLParen node)
    {
        if(_l_paren_ != null)
        {
            _l_paren_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_paren_ = node;
    }
    public PBoolExp GetBoolExp ()
    {
        return _bool_exp_;
    }

    public void SetBoolExp (PBoolExp node)
    {
        if(_bool_exp_ != null)
        {
            _bool_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bool_exp_ = node;
    }
    public TRParen GetRParen ()
    {
        return _r_paren_;
    }

    public void SetRParen (TRParen node)
    {
        if(_r_paren_ != null)
        {
            _r_paren_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_paren_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_l_paren_)
            + ToString (_bool_exp_)
            + ToString (_r_paren_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _l_paren_ == child )
        {
            _l_paren_ = null;
            return;
        }
        if ( _bool_exp_ == child )
        {
            _bool_exp_ = null;
            return;
        }
        if ( _r_paren_ == child )
        {
            _r_paren_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _l_paren_ == oldChild )
        {
            SetLParen ((TLParen) newChild);
            return;
        }
        if ( _bool_exp_ == oldChild )
        {
            SetBoolExp ((PBoolExp) newChild);
            return;
        }
        if ( _r_paren_ == oldChild )
        {
            SetRParen ((TRParen) newChild);
            return;
        }
    }

}
public sealed class ANoneBoolParens : PBoolParens
{
    private PNumComp _num_comp_;

    public ANoneBoolParens ()
    {
    }

    public ANoneBoolParens (
            PNumComp _num_comp_
    )
    {
        SetNumComp (_num_comp_);
    }

    public override Object Clone()
    {
        return new ANoneBoolParens (
            (PNumComp)CloneNode (_num_comp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneBoolParens(this);
    }

    public PNumComp GetNumComp ()
    {
        return _num_comp_;
    }

    public void SetNumComp (PNumComp node)
    {
        if(_num_comp_ != null)
        {
            _num_comp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _num_comp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_num_comp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _num_comp_ == child )
        {
            _num_comp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _num_comp_ == oldChild )
        {
            SetNumComp ((PNumComp) newChild);
            return;
        }
    }

}
public sealed class ALessNumComp : PNumComp
{
    private PExpression _lhs_;
    private TLtSign _lt_sign_;
    private PExpression _rhs_;

    public ALessNumComp ()
    {
    }

    public ALessNumComp (
            PExpression _lhs_,
            TLtSign _lt_sign_,
            PExpression _rhs_
    )
    {
        SetLhs (_lhs_);
        SetLtSign (_lt_sign_);
        SetRhs (_rhs_);
    }

    public override Object Clone()
    {
        return new ALessNumComp (
            (PExpression)CloneNode (_lhs_),
            (TLtSign)CloneNode (_lt_sign_),
            (PExpression)CloneNode (_rhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALessNumComp(this);
    }

    public PExpression GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExpression node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }
    public TLtSign GetLtSign ()
    {
        return _lt_sign_;
    }

    public void SetLtSign (TLtSign node)
    {
        if(_lt_sign_ != null)
        {
            _lt_sign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lt_sign_ = node;
    }
    public PExpression GetRhs ()
    {
        return _rhs_;
    }

    public void SetRhs (PExpression node)
    {
        if(_rhs_ != null)
        {
            _rhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
            + ToString (_lt_sign_)
            + ToString (_rhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
        if ( _lt_sign_ == child )
        {
            _lt_sign_ = null;
            return;
        }
        if ( _rhs_ == child )
        {
            _rhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExpression) newChild);
            return;
        }
        if ( _lt_sign_ == oldChild )
        {
            SetLtSign ((TLtSign) newChild);
            return;
        }
        if ( _rhs_ == oldChild )
        {
            SetRhs ((PExpression) newChild);
            return;
        }
    }

}
public sealed class ALessEqualNumComp : PNumComp
{
    private PExpression _lhs_;
    private TLeqSign _leq_sign_;
    private PExpression _rhs_;

    public ALessEqualNumComp ()
    {
    }

    public ALessEqualNumComp (
            PExpression _lhs_,
            TLeqSign _leq_sign_,
            PExpression _rhs_
    )
    {
        SetLhs (_lhs_);
        SetLeqSign (_leq_sign_);
        SetRhs (_rhs_);
    }

    public override Object Clone()
    {
        return new ALessEqualNumComp (
            (PExpression)CloneNode (_lhs_),
            (TLeqSign)CloneNode (_leq_sign_),
            (PExpression)CloneNode (_rhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALessEqualNumComp(this);
    }

    public PExpression GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExpression node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }
    public TLeqSign GetLeqSign ()
    {
        return _leq_sign_;
    }

    public void SetLeqSign (TLeqSign node)
    {
        if(_leq_sign_ != null)
        {
            _leq_sign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _leq_sign_ = node;
    }
    public PExpression GetRhs ()
    {
        return _rhs_;
    }

    public void SetRhs (PExpression node)
    {
        if(_rhs_ != null)
        {
            _rhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
            + ToString (_leq_sign_)
            + ToString (_rhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
        if ( _leq_sign_ == child )
        {
            _leq_sign_ = null;
            return;
        }
        if ( _rhs_ == child )
        {
            _rhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExpression) newChild);
            return;
        }
        if ( _leq_sign_ == oldChild )
        {
            SetLeqSign ((TLeqSign) newChild);
            return;
        }
        if ( _rhs_ == oldChild )
        {
            SetRhs ((PExpression) newChild);
            return;
        }
    }

}
public sealed class AGreaterNumComp : PNumComp
{
    private PExpression _lhs_;
    private TGtSign _gt_sign_;
    private PExpression _rhs_;

    public AGreaterNumComp ()
    {
    }

    public AGreaterNumComp (
            PExpression _lhs_,
            TGtSign _gt_sign_,
            PExpression _rhs_
    )
    {
        SetLhs (_lhs_);
        SetGtSign (_gt_sign_);
        SetRhs (_rhs_);
    }

    public override Object Clone()
    {
        return new AGreaterNumComp (
            (PExpression)CloneNode (_lhs_),
            (TGtSign)CloneNode (_gt_sign_),
            (PExpression)CloneNode (_rhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreaterNumComp(this);
    }

    public PExpression GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExpression node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }
    public TGtSign GetGtSign ()
    {
        return _gt_sign_;
    }

    public void SetGtSign (TGtSign node)
    {
        if(_gt_sign_ != null)
        {
            _gt_sign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _gt_sign_ = node;
    }
    public PExpression GetRhs ()
    {
        return _rhs_;
    }

    public void SetRhs (PExpression node)
    {
        if(_rhs_ != null)
        {
            _rhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
            + ToString (_gt_sign_)
            + ToString (_rhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
        if ( _gt_sign_ == child )
        {
            _gt_sign_ = null;
            return;
        }
        if ( _rhs_ == child )
        {
            _rhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExpression) newChild);
            return;
        }
        if ( _gt_sign_ == oldChild )
        {
            SetGtSign ((TGtSign) newChild);
            return;
        }
        if ( _rhs_ == oldChild )
        {
            SetRhs ((PExpression) newChild);
            return;
        }
    }

}
public sealed class AGreaterEqualNumComp : PNumComp
{
    private PExpression _lhs_;
    private TGeqSign _geq_sign_;
    private PExpression _rhs_;

    public AGreaterEqualNumComp ()
    {
    }

    public AGreaterEqualNumComp (
            PExpression _lhs_,
            TGeqSign _geq_sign_,
            PExpression _rhs_
    )
    {
        SetLhs (_lhs_);
        SetGeqSign (_geq_sign_);
        SetRhs (_rhs_);
    }

    public override Object Clone()
    {
        return new AGreaterEqualNumComp (
            (PExpression)CloneNode (_lhs_),
            (TGeqSign)CloneNode (_geq_sign_),
            (PExpression)CloneNode (_rhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreaterEqualNumComp(this);
    }

    public PExpression GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExpression node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }
    public TGeqSign GetGeqSign ()
    {
        return _geq_sign_;
    }

    public void SetGeqSign (TGeqSign node)
    {
        if(_geq_sign_ != null)
        {
            _geq_sign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _geq_sign_ = node;
    }
    public PExpression GetRhs ()
    {
        return _rhs_;
    }

    public void SetRhs (PExpression node)
    {
        if(_rhs_ != null)
        {
            _rhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
            + ToString (_geq_sign_)
            + ToString (_rhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
        if ( _geq_sign_ == child )
        {
            _geq_sign_ = null;
            return;
        }
        if ( _rhs_ == child )
        {
            _rhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExpression) newChild);
            return;
        }
        if ( _geq_sign_ == oldChild )
        {
            SetGeqSign ((TGeqSign) newChild);
            return;
        }
        if ( _rhs_ == oldChild )
        {
            SetRhs ((PExpression) newChild);
            return;
        }
    }

}
public sealed class AEqualNumComp : PNumComp
{
    private PExpression _lhs_;
    private TEqSign _eq_sign_;
    private PExpression _rhs_;

    public AEqualNumComp ()
    {
    }

    public AEqualNumComp (
            PExpression _lhs_,
            TEqSign _eq_sign_,
            PExpression _rhs_
    )
    {
        SetLhs (_lhs_);
        SetEqSign (_eq_sign_);
        SetRhs (_rhs_);
    }

    public override Object Clone()
    {
        return new AEqualNumComp (
            (PExpression)CloneNode (_lhs_),
            (TEqSign)CloneNode (_eq_sign_),
            (PExpression)CloneNode (_rhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEqualNumComp(this);
    }

    public PExpression GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExpression node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }
    public TEqSign GetEqSign ()
    {
        return _eq_sign_;
    }

    public void SetEqSign (TEqSign node)
    {
        if(_eq_sign_ != null)
        {
            _eq_sign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eq_sign_ = node;
    }
    public PExpression GetRhs ()
    {
        return _rhs_;
    }

    public void SetRhs (PExpression node)
    {
        if(_rhs_ != null)
        {
            _rhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
            + ToString (_eq_sign_)
            + ToString (_rhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
        if ( _eq_sign_ == child )
        {
            _eq_sign_ = null;
            return;
        }
        if ( _rhs_ == child )
        {
            _rhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExpression) newChild);
            return;
        }
        if ( _eq_sign_ == oldChild )
        {
            SetEqSign ((TEqSign) newChild);
            return;
        }
        if ( _rhs_ == oldChild )
        {
            SetRhs ((PExpression) newChild);
            return;
        }
    }

}
public sealed class ANotEqualNumComp : PNumComp
{
    private PExpression _lhs_;
    private TNeqSign _neq_sign_;
    private PExpression _rhs_;

    public ANotEqualNumComp ()
    {
    }

    public ANotEqualNumComp (
            PExpression _lhs_,
            TNeqSign _neq_sign_,
            PExpression _rhs_
    )
    {
        SetLhs (_lhs_);
        SetNeqSign (_neq_sign_);
        SetRhs (_rhs_);
    }

    public override Object Clone()
    {
        return new ANotEqualNumComp (
            (PExpression)CloneNode (_lhs_),
            (TNeqSign)CloneNode (_neq_sign_),
            (PExpression)CloneNode (_rhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANotEqualNumComp(this);
    }

    public PExpression GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExpression node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }
    public TNeqSign GetNeqSign ()
    {
        return _neq_sign_;
    }

    public void SetNeqSign (TNeqSign node)
    {
        if(_neq_sign_ != null)
        {
            _neq_sign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _neq_sign_ = node;
    }
    public PExpression GetRhs ()
    {
        return _rhs_;
    }

    public void SetRhs (PExpression node)
    {
        if(_rhs_ != null)
        {
            _rhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
            + ToString (_neq_sign_)
            + ToString (_rhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
        if ( _neq_sign_ == child )
        {
            _neq_sign_ = null;
            return;
        }
        if ( _rhs_ == child )
        {
            _rhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExpression) newChild);
            return;
        }
        if ( _neq_sign_ == oldChild )
        {
            SetNeqSign ((TNeqSign) newChild);
            return;
        }
        if ( _rhs_ == oldChild )
        {
            SetRhs ((PExpression) newChild);
            return;
        }
    }

}
public sealed class APlusExpression : PExpression
{
    private PExpression _expression_;
    private TPlusSign _plus_sign_;
    private PTerm _term_;

    public APlusExpression ()
    {
    }

    public APlusExpression (
            PExpression _expression_,
            TPlusSign _plus_sign_,
            PTerm _term_
    )
    {
        SetExpression (_expression_);
        SetPlusSign (_plus_sign_);
        SetTerm (_term_);
    }

    public override Object Clone()
    {
        return new APlusExpression (
            (PExpression)CloneNode (_expression_),
            (TPlusSign)CloneNode (_plus_sign_),
            (PTerm)CloneNode (_term_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPlusExpression(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TPlusSign GetPlusSign ()
    {
        return _plus_sign_;
    }

    public void SetPlusSign (TPlusSign node)
    {
        if(_plus_sign_ != null)
        {
            _plus_sign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_sign_ = node;
    }
    public PTerm GetTerm ()
    {
        return _term_;
    }

    public void SetTerm (PTerm node)
    {
        if(_term_ != null)
        {
            _term_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _term_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
            + ToString (_plus_sign_)
            + ToString (_term_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _plus_sign_ == child )
        {
            _plus_sign_ = null;
            return;
        }
        if ( _term_ == child )
        {
            _term_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _plus_sign_ == oldChild )
        {
            SetPlusSign ((TPlusSign) newChild);
            return;
        }
        if ( _term_ == oldChild )
        {
            SetTerm ((PTerm) newChild);
            return;
        }
    }

}
public sealed class AMinusExpression : PExpression
{
    private PExpression _expression_;
    private TMinusSign _minus_sign_;
    private PTerm _term_;

    public AMinusExpression ()
    {
    }

    public AMinusExpression (
            PExpression _expression_,
            TMinusSign _minus_sign_,
            PTerm _term_
    )
    {
        SetExpression (_expression_);
        SetMinusSign (_minus_sign_);
        SetTerm (_term_);
    }

    public override Object Clone()
    {
        return new AMinusExpression (
            (PExpression)CloneNode (_expression_),
            (TMinusSign)CloneNode (_minus_sign_),
            (PTerm)CloneNode (_term_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMinusExpression(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TMinusSign GetMinusSign ()
    {
        return _minus_sign_;
    }

    public void SetMinusSign (TMinusSign node)
    {
        if(_minus_sign_ != null)
        {
            _minus_sign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_sign_ = node;
    }
    public PTerm GetTerm ()
    {
        return _term_;
    }

    public void SetTerm (PTerm node)
    {
        if(_term_ != null)
        {
            _term_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _term_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
            + ToString (_minus_sign_)
            + ToString (_term_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _minus_sign_ == child )
        {
            _minus_sign_ = null;
            return;
        }
        if ( _term_ == child )
        {
            _term_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _minus_sign_ == oldChild )
        {
            SetMinusSign ((TMinusSign) newChild);
            return;
        }
        if ( _term_ == oldChild )
        {
            SetTerm ((PTerm) newChild);
            return;
        }
    }

}
public sealed class ASoloExpression : PExpression
{
    private PTerm _term_;

    public ASoloExpression ()
    {
    }

    public ASoloExpression (
            PTerm _term_
    )
    {
        SetTerm (_term_);
    }

    public override Object Clone()
    {
        return new ASoloExpression (
            (PTerm)CloneNode (_term_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASoloExpression(this);
    }

    public PTerm GetTerm ()
    {
        return _term_;
    }

    public void SetTerm (PTerm node)
    {
        if(_term_ != null)
        {
            _term_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _term_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_term_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _term_ == child )
        {
            _term_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _term_ == oldChild )
        {
            SetTerm ((PTerm) newChild);
            return;
        }
    }

}
public sealed class AMultTerm : PTerm
{
    private PTerm _term_;
    private TStar _star_;
    private PNegation _negation_;

    public AMultTerm ()
    {
    }

    public AMultTerm (
            PTerm _term_,
            TStar _star_,
            PNegation _negation_
    )
    {
        SetTerm (_term_);
        SetStar (_star_);
        SetNegation (_negation_);
    }

    public override Object Clone()
    {
        return new AMultTerm (
            (PTerm)CloneNode (_term_),
            (TStar)CloneNode (_star_),
            (PNegation)CloneNode (_negation_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultTerm(this);
    }

    public PTerm GetTerm ()
    {
        return _term_;
    }

    public void SetTerm (PTerm node)
    {
        if(_term_ != null)
        {
            _term_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _term_ = node;
    }
    public TStar GetStar ()
    {
        return _star_;
    }

    public void SetStar (TStar node)
    {
        if(_star_ != null)
        {
            _star_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _star_ = node;
    }
    public PNegation GetNegation ()
    {
        return _negation_;
    }

    public void SetNegation (PNegation node)
    {
        if(_negation_ != null)
        {
            _negation_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _negation_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_term_)
            + ToString (_star_)
            + ToString (_negation_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _term_ == child )
        {
            _term_ = null;
            return;
        }
        if ( _star_ == child )
        {
            _star_ = null;
            return;
        }
        if ( _negation_ == child )
        {
            _negation_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _term_ == oldChild )
        {
            SetTerm ((PTerm) newChild);
            return;
        }
        if ( _star_ == oldChild )
        {
            SetStar ((TStar) newChild);
            return;
        }
        if ( _negation_ == oldChild )
        {
            SetNegation ((PNegation) newChild);
            return;
        }
    }

}
public sealed class ADivTerm : PTerm
{
    private PTerm _term_;
    private TSlash _slash_;
    private PNegation _negation_;

    public ADivTerm ()
    {
    }

    public ADivTerm (
            PTerm _term_,
            TSlash _slash_,
            PNegation _negation_
    )
    {
        SetTerm (_term_);
        SetSlash (_slash_);
        SetNegation (_negation_);
    }

    public override Object Clone()
    {
        return new ADivTerm (
            (PTerm)CloneNode (_term_),
            (TSlash)CloneNode (_slash_),
            (PNegation)CloneNode (_negation_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADivTerm(this);
    }

    public PTerm GetTerm ()
    {
        return _term_;
    }

    public void SetTerm (PTerm node)
    {
        if(_term_ != null)
        {
            _term_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _term_ = node;
    }
    public TSlash GetSlash ()
    {
        return _slash_;
    }

    public void SetSlash (TSlash node)
    {
        if(_slash_ != null)
        {
            _slash_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _slash_ = node;
    }
    public PNegation GetNegation ()
    {
        return _negation_;
    }

    public void SetNegation (PNegation node)
    {
        if(_negation_ != null)
        {
            _negation_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _negation_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_term_)
            + ToString (_slash_)
            + ToString (_negation_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _term_ == child )
        {
            _term_ = null;
            return;
        }
        if ( _slash_ == child )
        {
            _slash_ = null;
            return;
        }
        if ( _negation_ == child )
        {
            _negation_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _term_ == oldChild )
        {
            SetTerm ((PTerm) newChild);
            return;
        }
        if ( _slash_ == oldChild )
        {
            SetSlash ((TSlash) newChild);
            return;
        }
        if ( _negation_ == oldChild )
        {
            SetNegation ((PNegation) newChild);
            return;
        }
    }

}
public sealed class ASingleTerm : PTerm
{
    private PNegation _negation_;

    public ASingleTerm ()
    {
    }

    public ASingleTerm (
            PNegation _negation_
    )
    {
        SetNegation (_negation_);
    }

    public override Object Clone()
    {
        return new ASingleTerm (
            (PNegation)CloneNode (_negation_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleTerm(this);
    }

    public PNegation GetNegation ()
    {
        return _negation_;
    }

    public void SetNegation (PNegation node)
    {
        if(_negation_ != null)
        {
            _negation_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _negation_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_negation_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _negation_ == child )
        {
            _negation_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _negation_ == oldChild )
        {
            SetNegation ((PNegation) newChild);
            return;
        }
    }

}
public sealed class ANegNegation : PNegation
{
    private TMinusSign _minus_sign_;
    private PParentheticalExp _parenthetical_exp_;

    public ANegNegation ()
    {
    }

    public ANegNegation (
            TMinusSign _minus_sign_,
            PParentheticalExp _parenthetical_exp_
    )
    {
        SetMinusSign (_minus_sign_);
        SetParentheticalExp (_parenthetical_exp_);
    }

    public override Object Clone()
    {
        return new ANegNegation (
            (TMinusSign)CloneNode (_minus_sign_),
            (PParentheticalExp)CloneNode (_parenthetical_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANegNegation(this);
    }

    public TMinusSign GetMinusSign ()
    {
        return _minus_sign_;
    }

    public void SetMinusSign (TMinusSign node)
    {
        if(_minus_sign_ != null)
        {
            _minus_sign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_sign_ = node;
    }
    public PParentheticalExp GetParentheticalExp ()
    {
        return _parenthetical_exp_;
    }

    public void SetParentheticalExp (PParentheticalExp node)
    {
        if(_parenthetical_exp_ != null)
        {
            _parenthetical_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parenthetical_exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_minus_sign_)
            + ToString (_parenthetical_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _minus_sign_ == child )
        {
            _minus_sign_ = null;
            return;
        }
        if ( _parenthetical_exp_ == child )
        {
            _parenthetical_exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _minus_sign_ == oldChild )
        {
            SetMinusSign ((TMinusSign) newChild);
            return;
        }
        if ( _parenthetical_exp_ == oldChild )
        {
            SetParentheticalExp ((PParentheticalExp) newChild);
            return;
        }
    }

}
public sealed class APosNegation : PNegation
{
    private PParentheticalExp _parenthetical_exp_;

    public APosNegation ()
    {
    }

    public APosNegation (
            PParentheticalExp _parenthetical_exp_
    )
    {
        SetParentheticalExp (_parenthetical_exp_);
    }

    public override Object Clone()
    {
        return new APosNegation (
            (PParentheticalExp)CloneNode (_parenthetical_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPosNegation(this);
    }

    public PParentheticalExp GetParentheticalExp ()
    {
        return _parenthetical_exp_;
    }

    public void SetParentheticalExp (PParentheticalExp node)
    {
        if(_parenthetical_exp_ != null)
        {
            _parenthetical_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parenthetical_exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_parenthetical_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _parenthetical_exp_ == child )
        {
            _parenthetical_exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _parenthetical_exp_ == oldChild )
        {
            SetParentheticalExp ((PParentheticalExp) newChild);
            return;
        }
    }

}
public sealed class ASomeParentheticalExp : PParentheticalExp
{
    private TLParen _l_paren_;
    private PExpression _expression_;
    private TRParen _r_paren_;

    public ASomeParentheticalExp ()
    {
    }

    public ASomeParentheticalExp (
            TLParen _l_paren_,
            PExpression _expression_,
            TRParen _r_paren_
    )
    {
        SetLParen (_l_paren_);
        SetExpression (_expression_);
        SetRParen (_r_paren_);
    }

    public override Object Clone()
    {
        return new ASomeParentheticalExp (
            (TLParen)CloneNode (_l_paren_),
            (PExpression)CloneNode (_expression_),
            (TRParen)CloneNode (_r_paren_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASomeParentheticalExp(this);
    }

    public TLParen GetLParen ()
    {
        return _l_paren_;
    }

    public void SetLParen (TLParen node)
    {
        if(_l_paren_ != null)
        {
            _l_paren_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_paren_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TRParen GetRParen ()
    {
        return _r_paren_;
    }

    public void SetRParen (TRParen node)
    {
        if(_r_paren_ != null)
        {
            _r_paren_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_paren_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_l_paren_)
            + ToString (_expression_)
            + ToString (_r_paren_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _l_paren_ == child )
        {
            _l_paren_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _r_paren_ == child )
        {
            _r_paren_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _l_paren_ == oldChild )
        {
            SetLParen ((TLParen) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _r_paren_ == oldChild )
        {
            SetRParen ((TRParen) newChild);
            return;
        }
    }

}
public sealed class ANoneParentheticalExp : PParentheticalExp
{
    private POperand _operand_;

    public ANoneParentheticalExp ()
    {
    }

    public ANoneParentheticalExp (
            POperand _operand_
    )
    {
        SetOperand (_operand_);
    }

    public override Object Clone()
    {
        return new ANoneParentheticalExp (
            (POperand)CloneNode (_operand_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneParentheticalExp(this);
    }

    public POperand GetOperand ()
    {
        return _operand_;
    }

    public void SetOperand (POperand node)
    {
        if(_operand_ != null)
        {
            _operand_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operand_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_operand_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _operand_ == child )
        {
            _operand_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _operand_ == oldChild )
        {
            SetOperand ((POperand) newChild);
            return;
        }
    }

}
public sealed class AVarOperand : POperand
{
    private TId _id_;

    public AVarOperand ()
    {
    }

    public AVarOperand (
            TId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AVarOperand (
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVarOperand(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class ALitOperand : POperand
{
    private PLiteral _literal_;

    public ALitOperand ()
    {
    }

    public ALitOperand (
            PLiteral _literal_
    )
    {
        SetLiteral (_literal_);
    }

    public override Object Clone()
    {
        return new ALitOperand (
            (PLiteral)CloneNode (_literal_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALitOperand(this);
    }

    public PLiteral GetLiteral ()
    {
        return _literal_;
    }

    public void SetLiteral (PLiteral node)
    {
        if(_literal_ != null)
        {
            _literal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _literal_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_literal_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _literal_ == child )
        {
            _literal_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _literal_ == oldChild )
        {
            SetLiteral ((PLiteral) newChild);
            return;
        }
    }

}
public sealed class AIntLiteral : PLiteral
{
    private TLitInteger _lit_integer_;

    public AIntLiteral ()
    {
    }

    public AIntLiteral (
            TLitInteger _lit_integer_
    )
    {
        SetLitInteger (_lit_integer_);
    }

    public override Object Clone()
    {
        return new AIntLiteral (
            (TLitInteger)CloneNode (_lit_integer_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntLiteral(this);
    }

    public TLitInteger GetLitInteger ()
    {
        return _lit_integer_;
    }

    public void SetLitInteger (TLitInteger node)
    {
        if(_lit_integer_ != null)
        {
            _lit_integer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lit_integer_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lit_integer_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lit_integer_ == child )
        {
            _lit_integer_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lit_integer_ == oldChild )
        {
            SetLitInteger ((TLitInteger) newChild);
            return;
        }
    }

}
public sealed class AFloatLiteral : PLiteral
{
    private TLitFloat _lit_float_;

    public AFloatLiteral ()
    {
    }

    public AFloatLiteral (
            TLitFloat _lit_float_
    )
    {
        SetLitFloat (_lit_float_);
    }

    public override Object Clone()
    {
        return new AFloatLiteral (
            (TLitFloat)CloneNode (_lit_float_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatLiteral(this);
    }

    public TLitFloat GetLitFloat ()
    {
        return _lit_float_;
    }

    public void SetLitFloat (TLitFloat node)
    {
        if(_lit_float_ != null)
        {
            _lit_float_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lit_float_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lit_float_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lit_float_ == child )
        {
            _lit_float_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lit_float_ == oldChild )
        {
            SetLitFloat ((TLitFloat) newChild);
            return;
        }
    }

}
public sealed class AStrLiteral : PLiteral
{
    private TLitStr _lit_str_;

    public AStrLiteral ()
    {
    }

    public AStrLiteral (
            TLitStr _lit_str_
    )
    {
        SetLitStr (_lit_str_);
    }

    public override Object Clone()
    {
        return new AStrLiteral (
            (TLitStr)CloneNode (_lit_str_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStrLiteral(this);
    }

    public TLitStr GetLitStr ()
    {
        return _lit_str_;
    }

    public void SetLitStr (TLitStr node)
    {
        if(_lit_str_ != null)
        {
            _lit_str_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lit_str_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lit_str_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lit_str_ == child )
        {
            _lit_str_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lit_str_ == oldChild )
        {
            SetLitStr ((TLitStr) newChild);
            return;
        }
    }

}
public sealed class ASomeParamDeclarations : PParamDeclarations
{
    private PParamDeclarations _param_declarations_;
    private TComma _comma_;
    private PParamDeclaration _param_declaration_;

    public ASomeParamDeclarations ()
    {
    }

    public ASomeParamDeclarations (
            PParamDeclarations _param_declarations_,
            TComma _comma_,
            PParamDeclaration _param_declaration_
    )
    {
        SetParamDeclarations (_param_declarations_);
        SetComma (_comma_);
        SetParamDeclaration (_param_declaration_);
    }

    public override Object Clone()
    {
        return new ASomeParamDeclarations (
            (PParamDeclarations)CloneNode (_param_declarations_),
            (TComma)CloneNode (_comma_),
            (PParamDeclaration)CloneNode (_param_declaration_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASomeParamDeclarations(this);
    }

    public PParamDeclarations GetParamDeclarations ()
    {
        return _param_declarations_;
    }

    public void SetParamDeclarations (PParamDeclarations node)
    {
        if(_param_declarations_ != null)
        {
            _param_declarations_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _param_declarations_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PParamDeclaration GetParamDeclaration ()
    {
        return _param_declaration_;
    }

    public void SetParamDeclaration (PParamDeclaration node)
    {
        if(_param_declaration_ != null)
        {
            _param_declaration_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _param_declaration_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_param_declarations_)
            + ToString (_comma_)
            + ToString (_param_declaration_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _param_declarations_ == child )
        {
            _param_declarations_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _param_declaration_ == child )
        {
            _param_declaration_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _param_declarations_ == oldChild )
        {
            SetParamDeclarations ((PParamDeclarations) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _param_declaration_ == oldChild )
        {
            SetParamDeclaration ((PParamDeclaration) newChild);
            return;
        }
    }

}
public sealed class AOneParamDeclarations : PParamDeclarations
{
    private PParamDeclaration _param_declaration_;

    public AOneParamDeclarations ()
    {
    }

    public AOneParamDeclarations (
            PParamDeclaration _param_declaration_
    )
    {
        SetParamDeclaration (_param_declaration_);
    }

    public override Object Clone()
    {
        return new AOneParamDeclarations (
            (PParamDeclaration)CloneNode (_param_declaration_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneParamDeclarations(this);
    }

    public PParamDeclaration GetParamDeclaration ()
    {
        return _param_declaration_;
    }

    public void SetParamDeclaration (PParamDeclaration node)
    {
        if(_param_declaration_ != null)
        {
            _param_declaration_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _param_declaration_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_param_declaration_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _param_declaration_ == child )
        {
            _param_declaration_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _param_declaration_ == oldChild )
        {
            SetParamDeclaration ((PParamDeclaration) newChild);
            return;
        }
    }

}
public sealed class ANoneParamDeclarations : PParamDeclarations
{


    public ANoneParamDeclarations (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneParamDeclarations (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneParamDeclarations(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AParamDeclaration : PParamDeclaration
{
    private TRwType _rw_type_;
    private TId _id_;

    public AParamDeclaration ()
    {
    }

    public AParamDeclaration (
            TRwType _rw_type_,
            TId _id_
    )
    {
        SetRwType (_rw_type_);
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AParamDeclaration (
            (TRwType)CloneNode (_rw_type_),
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParamDeclaration(this);
    }

    public TRwType GetRwType ()
    {
        return _rw_type_;
    }

    public void SetRwType (TRwType node)
    {
        if(_rw_type_ != null)
        {
            _rw_type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rw_type_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_rw_type_)
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _rw_type_ == child )
        {
            _rw_type_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _rw_type_ == oldChild )
        {
            SetRwType ((TRwType) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class ASomeStatements : PStatements
{
    private PStatements _statements_;
    private PStatement _statement_;

    public ASomeStatements ()
    {
    }

    public ASomeStatements (
            PStatements _statements_,
            PStatement _statement_
    )
    {
        SetStatements (_statements_);
        SetStatement (_statement_);
    }

    public override Object Clone()
    {
        return new ASomeStatements (
            (PStatements)CloneNode (_statements_),
            (PStatement)CloneNode (_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASomeStatements(this);
    }

    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public PStatement GetStatement ()
    {
        return _statement_;
    }

    public void SetStatement (PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_statements_)
            + ToString (_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _statement_ == child )
        {
            _statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _statement_ == oldChild )
        {
            SetStatement ((PStatement) newChild);
            return;
        }
    }

}
public sealed class ANoneStatements : PStatements
{


    public ANoneStatements (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneStatements (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneStatements(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ADeclarationStatement : PStatement
{
    private PVarDec _var_dec_;

    public ADeclarationStatement ()
    {
    }

    public ADeclarationStatement (
            PVarDec _var_dec_
    )
    {
        SetVarDec (_var_dec_);
    }

    public override Object Clone()
    {
        return new ADeclarationStatement (
            (PVarDec)CloneNode (_var_dec_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclarationStatement(this);
    }

    public PVarDec GetVarDec ()
    {
        return _var_dec_;
    }

    public void SetVarDec (PVarDec node)
    {
        if(_var_dec_ != null)
        {
            _var_dec_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_dec_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_var_dec_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _var_dec_ == child )
        {
            _var_dec_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _var_dec_ == oldChild )
        {
            SetVarDec ((PVarDec) newChild);
            return;
        }
    }

}
public sealed class ACallStatement : PStatement
{
    private PFunctCall _funct_call_;

    public ACallStatement ()
    {
    }

    public ACallStatement (
            PFunctCall _funct_call_
    )
    {
        SetFunctCall (_funct_call_);
    }

    public override Object Clone()
    {
        return new ACallStatement (
            (PFunctCall)CloneNode (_funct_call_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACallStatement(this);
    }

    public PFunctCall GetFunctCall ()
    {
        return _funct_call_;
    }

    public void SetFunctCall (PFunctCall node)
    {
        if(_funct_call_ != null)
        {
            _funct_call_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _funct_call_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_funct_call_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _funct_call_ == child )
        {
            _funct_call_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _funct_call_ == oldChild )
        {
            SetFunctCall ((PFunctCall) newChild);
            return;
        }
    }

}
public sealed class AAssignmentStatement : PStatement
{
    private PAssignment _assignment_;

    public AAssignmentStatement ()
    {
    }

    public AAssignmentStatement (
            PAssignment _assignment_
    )
    {
        SetAssignment (_assignment_);
    }

    public override Object Clone()
    {
        return new AAssignmentStatement (
            (PAssignment)CloneNode (_assignment_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignmentStatement(this);
    }

    public PAssignment GetAssignment ()
    {
        return _assignment_;
    }

    public void SetAssignment (PAssignment node)
    {
        if(_assignment_ != null)
        {
            _assignment_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignment_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assignment_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assignment_ == child )
        {
            _assignment_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assignment_ == oldChild )
        {
            SetAssignment ((PAssignment) newChild);
            return;
        }
    }

}
public sealed class AIfStatement : PStatement
{
    private PIfStmt _if_stmt_;

    public AIfStatement ()
    {
    }

    public AIfStatement (
            PIfStmt _if_stmt_
    )
    {
        SetIfStmt (_if_stmt_);
    }

    public override Object Clone()
    {
        return new AIfStatement (
            (PIfStmt)CloneNode (_if_stmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfStatement(this);
    }

    public PIfStmt GetIfStmt ()
    {
        return _if_stmt_;
    }

    public void SetIfStmt (PIfStmt node)
    {
        if(_if_stmt_ != null)
        {
            _if_stmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_stmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_stmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_stmt_ == child )
        {
            _if_stmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_stmt_ == oldChild )
        {
            SetIfStmt ((PIfStmt) newChild);
            return;
        }
    }

}
public sealed class ALoopStatement : PStatement
{
    private PLoopStmt _loop_stmt_;

    public ALoopStatement ()
    {
    }

    public ALoopStatement (
            PLoopStmt _loop_stmt_
    )
    {
        SetLoopStmt (_loop_stmt_);
    }

    public override Object Clone()
    {
        return new ALoopStatement (
            (PLoopStmt)CloneNode (_loop_stmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALoopStatement(this);
    }

    public PLoopStmt GetLoopStmt ()
    {
        return _loop_stmt_;
    }

    public void SetLoopStmt (PLoopStmt node)
    {
        if(_loop_stmt_ != null)
        {
            _loop_stmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _loop_stmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_loop_stmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _loop_stmt_ == child )
        {
            _loop_stmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _loop_stmt_ == oldChild )
        {
            SetLoopStmt ((PLoopStmt) newChild);
            return;
        }
    }

}
public sealed class AVarDec : PVarDec
{
    private TRwType _rw_type_;
    private TId _id_;
    private POptAssignment _opt_assignment_;
    private TSemiColon _semi_colon_;

    public AVarDec ()
    {
    }

    public AVarDec (
            TRwType _rw_type_,
            TId _id_,
            POptAssignment _opt_assignment_,
            TSemiColon _semi_colon_
    )
    {
        SetRwType (_rw_type_);
        SetId (_id_);
        SetOptAssignment (_opt_assignment_);
        SetSemiColon (_semi_colon_);
    }

    public override Object Clone()
    {
        return new AVarDec (
            (TRwType)CloneNode (_rw_type_),
            (TId)CloneNode (_id_),
            (POptAssignment)CloneNode (_opt_assignment_),
            (TSemiColon)CloneNode (_semi_colon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVarDec(this);
    }

    public TRwType GetRwType ()
    {
        return _rw_type_;
    }

    public void SetRwType (TRwType node)
    {
        if(_rw_type_ != null)
        {
            _rw_type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rw_type_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public POptAssignment GetOptAssignment ()
    {
        return _opt_assignment_;
    }

    public void SetOptAssignment (POptAssignment node)
    {
        if(_opt_assignment_ != null)
        {
            _opt_assignment_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _opt_assignment_ = node;
    }
    public TSemiColon GetSemiColon ()
    {
        return _semi_colon_;
    }

    public void SetSemiColon (TSemiColon node)
    {
        if(_semi_colon_ != null)
        {
            _semi_colon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semi_colon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_rw_type_)
            + ToString (_id_)
            + ToString (_opt_assignment_)
            + ToString (_semi_colon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _rw_type_ == child )
        {
            _rw_type_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _opt_assignment_ == child )
        {
            _opt_assignment_ = null;
            return;
        }
        if ( _semi_colon_ == child )
        {
            _semi_colon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _rw_type_ == oldChild )
        {
            SetRwType ((TRwType) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _opt_assignment_ == oldChild )
        {
            SetOptAssignment ((POptAssignment) newChild);
            return;
        }
        if ( _semi_colon_ == oldChild )
        {
            SetSemiColon ((TSemiColon) newChild);
            return;
        }
    }

}
public sealed class AOptForOptAssignment : POptAssignment
{
    private TAssign _assign_;
    private PExpression _expression_;

    public AOptForOptAssignment ()
    {
    }

    public AOptForOptAssignment (
            TAssign _assign_,
            PExpression _expression_
    )
    {
        SetAssign (_assign_);
        SetExpression (_expression_);
    }

    public override Object Clone()
    {
        return new AOptForOptAssignment (
            (TAssign)CloneNode (_assign_),
            (PExpression)CloneNode (_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOptForOptAssignment(this);
    }

    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assign_)
            + ToString (_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
    }

}
public sealed class AOptAgainstOptAssignment : POptAssignment
{


    public AOptAgainstOptAssignment (
    )
    {
    }

    public override Object Clone()
    {
        return new AOptAgainstOptAssignment (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOptAgainstOptAssignment(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AFunctCall : PFunctCall
{
    private TId _id_;
    private TLParen _l_paren_;
    private PCallParams _call_params_;
    private TRParen _r_paren_;
    private TSemiColon _semi_colon_;

    public AFunctCall ()
    {
    }

    public AFunctCall (
            TId _id_,
            TLParen _l_paren_,
            PCallParams _call_params_,
            TRParen _r_paren_,
            TSemiColon _semi_colon_
    )
    {
        SetId (_id_);
        SetLParen (_l_paren_);
        SetCallParams (_call_params_);
        SetRParen (_r_paren_);
        SetSemiColon (_semi_colon_);
    }

    public override Object Clone()
    {
        return new AFunctCall (
            (TId)CloneNode (_id_),
            (TLParen)CloneNode (_l_paren_),
            (PCallParams)CloneNode (_call_params_),
            (TRParen)CloneNode (_r_paren_),
            (TSemiColon)CloneNode (_semi_colon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctCall(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TLParen GetLParen ()
    {
        return _l_paren_;
    }

    public void SetLParen (TLParen node)
    {
        if(_l_paren_ != null)
        {
            _l_paren_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_paren_ = node;
    }
    public PCallParams GetCallParams ()
    {
        return _call_params_;
    }

    public void SetCallParams (PCallParams node)
    {
        if(_call_params_ != null)
        {
            _call_params_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _call_params_ = node;
    }
    public TRParen GetRParen ()
    {
        return _r_paren_;
    }

    public void SetRParen (TRParen node)
    {
        if(_r_paren_ != null)
        {
            _r_paren_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_paren_ = node;
    }
    public TSemiColon GetSemiColon ()
    {
        return _semi_colon_;
    }

    public void SetSemiColon (TSemiColon node)
    {
        if(_semi_colon_ != null)
        {
            _semi_colon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semi_colon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_l_paren_)
            + ToString (_call_params_)
            + ToString (_r_paren_)
            + ToString (_semi_colon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _l_paren_ == child )
        {
            _l_paren_ = null;
            return;
        }
        if ( _call_params_ == child )
        {
            _call_params_ = null;
            return;
        }
        if ( _r_paren_ == child )
        {
            _r_paren_ = null;
            return;
        }
        if ( _semi_colon_ == child )
        {
            _semi_colon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _l_paren_ == oldChild )
        {
            SetLParen ((TLParen) newChild);
            return;
        }
        if ( _call_params_ == oldChild )
        {
            SetCallParams ((PCallParams) newChild);
            return;
        }
        if ( _r_paren_ == oldChild )
        {
            SetRParen ((TRParen) newChild);
            return;
        }
        if ( _semi_colon_ == oldChild )
        {
            SetSemiColon ((TSemiColon) newChild);
            return;
        }
    }

}
public sealed class ASomeCallParams : PCallParams
{
    private PCallParams _call_params_;
    private TComma _comma_;
    private PExpression _expression_;

    public ASomeCallParams ()
    {
    }

    public ASomeCallParams (
            PCallParams _call_params_,
            TComma _comma_,
            PExpression _expression_
    )
    {
        SetCallParams (_call_params_);
        SetComma (_comma_);
        SetExpression (_expression_);
    }

    public override Object Clone()
    {
        return new ASomeCallParams (
            (PCallParams)CloneNode (_call_params_),
            (TComma)CloneNode (_comma_),
            (PExpression)CloneNode (_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASomeCallParams(this);
    }

    public PCallParams GetCallParams ()
    {
        return _call_params_;
    }

    public void SetCallParams (PCallParams node)
    {
        if(_call_params_ != null)
        {
            _call_params_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _call_params_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_call_params_)
            + ToString (_comma_)
            + ToString (_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _call_params_ == child )
        {
            _call_params_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _call_params_ == oldChild )
        {
            SetCallParams ((PCallParams) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
    }

}
public sealed class AOneCallParams : PCallParams
{
    private PExpression _expression_;

    public AOneCallParams ()
    {
    }

    public AOneCallParams (
            PExpression _expression_
    )
    {
        SetExpression (_expression_);
    }

    public override Object Clone()
    {
        return new AOneCallParams (
            (PExpression)CloneNode (_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneCallParams(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
    }

}
public sealed class ANoneCallParams : PCallParams
{


    public ANoneCallParams (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneCallParams (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneCallParams(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AAssignment : PAssignment
{
    private TId _id_;
    private TAssign _assign_;
    private PExpression _expression_;
    private TSemiColon _semi_colon_;

    public AAssignment ()
    {
    }

    public AAssignment (
            TId _id_,
            TAssign _assign_,
            PExpression _expression_,
            TSemiColon _semi_colon_
    )
    {
        SetId (_id_);
        SetAssign (_assign_);
        SetExpression (_expression_);
        SetSemiColon (_semi_colon_);
    }

    public override Object Clone()
    {
        return new AAssignment (
            (TId)CloneNode (_id_),
            (TAssign)CloneNode (_assign_),
            (PExpression)CloneNode (_expression_),
            (TSemiColon)CloneNode (_semi_colon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignment(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TSemiColon GetSemiColon ()
    {
        return _semi_colon_;
    }

    public void SetSemiColon (TSemiColon node)
    {
        if(_semi_colon_ != null)
        {
            _semi_colon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semi_colon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_assign_)
            + ToString (_expression_)
            + ToString (_semi_colon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _semi_colon_ == child )
        {
            _semi_colon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _semi_colon_ == oldChild )
        {
            SetSemiColon ((TSemiColon) newChild);
            return;
        }
    }

}
public sealed class AIfStmt : PIfStmt
{
    private TRwIf _rw_if_;
    private TLParen _l_paren_;
    private PBoolExp _bool_exp_;
    private TRParen _r_paren_;
    private TLBrace _l_brace_;
    private PStatements _statements_;
    private TRBrace _r_brace_;
    private PElseStmt _else_stmt_;

    public AIfStmt ()
    {
    }

    public AIfStmt (
            TRwIf _rw_if_,
            TLParen _l_paren_,
            PBoolExp _bool_exp_,
            TRParen _r_paren_,
            TLBrace _l_brace_,
            PStatements _statements_,
            TRBrace _r_brace_,
            PElseStmt _else_stmt_
    )
    {
        SetRwIf (_rw_if_);
        SetLParen (_l_paren_);
        SetBoolExp (_bool_exp_);
        SetRParen (_r_paren_);
        SetLBrace (_l_brace_);
        SetStatements (_statements_);
        SetRBrace (_r_brace_);
        SetElseStmt (_else_stmt_);
    }

    public override Object Clone()
    {
        return new AIfStmt (
            (TRwIf)CloneNode (_rw_if_),
            (TLParen)CloneNode (_l_paren_),
            (PBoolExp)CloneNode (_bool_exp_),
            (TRParen)CloneNode (_r_paren_),
            (TLBrace)CloneNode (_l_brace_),
            (PStatements)CloneNode (_statements_),
            (TRBrace)CloneNode (_r_brace_),
            (PElseStmt)CloneNode (_else_stmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfStmt(this);
    }

    public TRwIf GetRwIf ()
    {
        return _rw_if_;
    }

    public void SetRwIf (TRwIf node)
    {
        if(_rw_if_ != null)
        {
            _rw_if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rw_if_ = node;
    }
    public TLParen GetLParen ()
    {
        return _l_paren_;
    }

    public void SetLParen (TLParen node)
    {
        if(_l_paren_ != null)
        {
            _l_paren_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_paren_ = node;
    }
    public PBoolExp GetBoolExp ()
    {
        return _bool_exp_;
    }

    public void SetBoolExp (PBoolExp node)
    {
        if(_bool_exp_ != null)
        {
            _bool_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bool_exp_ = node;
    }
    public TRParen GetRParen ()
    {
        return _r_paren_;
    }

    public void SetRParen (TRParen node)
    {
        if(_r_paren_ != null)
        {
            _r_paren_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_paren_ = node;
    }
    public TLBrace GetLBrace ()
    {
        return _l_brace_;
    }

    public void SetLBrace (TLBrace node)
    {
        if(_l_brace_ != null)
        {
            _l_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_brace_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TRBrace GetRBrace ()
    {
        return _r_brace_;
    }

    public void SetRBrace (TRBrace node)
    {
        if(_r_brace_ != null)
        {
            _r_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_brace_ = node;
    }
    public PElseStmt GetElseStmt ()
    {
        return _else_stmt_;
    }

    public void SetElseStmt (PElseStmt node)
    {
        if(_else_stmt_ != null)
        {
            _else_stmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_stmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_rw_if_)
            + ToString (_l_paren_)
            + ToString (_bool_exp_)
            + ToString (_r_paren_)
            + ToString (_l_brace_)
            + ToString (_statements_)
            + ToString (_r_brace_)
            + ToString (_else_stmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _rw_if_ == child )
        {
            _rw_if_ = null;
            return;
        }
        if ( _l_paren_ == child )
        {
            _l_paren_ = null;
            return;
        }
        if ( _bool_exp_ == child )
        {
            _bool_exp_ = null;
            return;
        }
        if ( _r_paren_ == child )
        {
            _r_paren_ = null;
            return;
        }
        if ( _l_brace_ == child )
        {
            _l_brace_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _r_brace_ == child )
        {
            _r_brace_ = null;
            return;
        }
        if ( _else_stmt_ == child )
        {
            _else_stmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _rw_if_ == oldChild )
        {
            SetRwIf ((TRwIf) newChild);
            return;
        }
        if ( _l_paren_ == oldChild )
        {
            SetLParen ((TLParen) newChild);
            return;
        }
        if ( _bool_exp_ == oldChild )
        {
            SetBoolExp ((PBoolExp) newChild);
            return;
        }
        if ( _r_paren_ == oldChild )
        {
            SetRParen ((TRParen) newChild);
            return;
        }
        if ( _l_brace_ == oldChild )
        {
            SetLBrace ((TLBrace) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _r_brace_ == oldChild )
        {
            SetRBrace ((TRBrace) newChild);
            return;
        }
        if ( _else_stmt_ == oldChild )
        {
            SetElseStmt ((PElseStmt) newChild);
            return;
        }
    }

}
public sealed class AYesElseElseStmt : PElseStmt
{
    private TRwElse _rw_else_;
    private TLBrace _l_brace_;
    private PStatements _statements_;
    private TRBrace _r_brace_;

    public AYesElseElseStmt ()
    {
    }

    public AYesElseElseStmt (
            TRwElse _rw_else_,
            TLBrace _l_brace_,
            PStatements _statements_,
            TRBrace _r_brace_
    )
    {
        SetRwElse (_rw_else_);
        SetLBrace (_l_brace_);
        SetStatements (_statements_);
        SetRBrace (_r_brace_);
    }

    public override Object Clone()
    {
        return new AYesElseElseStmt (
            (TRwElse)CloneNode (_rw_else_),
            (TLBrace)CloneNode (_l_brace_),
            (PStatements)CloneNode (_statements_),
            (TRBrace)CloneNode (_r_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAYesElseElseStmt(this);
    }

    public TRwElse GetRwElse ()
    {
        return _rw_else_;
    }

    public void SetRwElse (TRwElse node)
    {
        if(_rw_else_ != null)
        {
            _rw_else_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rw_else_ = node;
    }
    public TLBrace GetLBrace ()
    {
        return _l_brace_;
    }

    public void SetLBrace (TLBrace node)
    {
        if(_l_brace_ != null)
        {
            _l_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_brace_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TRBrace GetRBrace ()
    {
        return _r_brace_;
    }

    public void SetRBrace (TRBrace node)
    {
        if(_r_brace_ != null)
        {
            _r_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_rw_else_)
            + ToString (_l_brace_)
            + ToString (_statements_)
            + ToString (_r_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _rw_else_ == child )
        {
            _rw_else_ = null;
            return;
        }
        if ( _l_brace_ == child )
        {
            _l_brace_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _r_brace_ == child )
        {
            _r_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _rw_else_ == oldChild )
        {
            SetRwElse ((TRwElse) newChild);
            return;
        }
        if ( _l_brace_ == oldChild )
        {
            SetLBrace ((TLBrace) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _r_brace_ == oldChild )
        {
            SetRBrace ((TRBrace) newChild);
            return;
        }
    }

}
public sealed class ANoElseElseStmt : PElseStmt
{


    public ANoElseElseStmt (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoElseElseStmt (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoElseElseStmt(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ALoopStmt : PLoopStmt
{
    private TRwWhile _rw_while_;
    private TLParen _l_paren_;
    private PBoolExp _bool_exp_;
    private TRParen _r_paren_;
    private TLBrace _l_brace_;
    private PStatements _statements_;
    private TRBrace _r_brace_;

    public ALoopStmt ()
    {
    }

    public ALoopStmt (
            TRwWhile _rw_while_,
            TLParen _l_paren_,
            PBoolExp _bool_exp_,
            TRParen _r_paren_,
            TLBrace _l_brace_,
            PStatements _statements_,
            TRBrace _r_brace_
    )
    {
        SetRwWhile (_rw_while_);
        SetLParen (_l_paren_);
        SetBoolExp (_bool_exp_);
        SetRParen (_r_paren_);
        SetLBrace (_l_brace_);
        SetStatements (_statements_);
        SetRBrace (_r_brace_);
    }

    public override Object Clone()
    {
        return new ALoopStmt (
            (TRwWhile)CloneNode (_rw_while_),
            (TLParen)CloneNode (_l_paren_),
            (PBoolExp)CloneNode (_bool_exp_),
            (TRParen)CloneNode (_r_paren_),
            (TLBrace)CloneNode (_l_brace_),
            (PStatements)CloneNode (_statements_),
            (TRBrace)CloneNode (_r_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALoopStmt(this);
    }

    public TRwWhile GetRwWhile ()
    {
        return _rw_while_;
    }

    public void SetRwWhile (TRwWhile node)
    {
        if(_rw_while_ != null)
        {
            _rw_while_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rw_while_ = node;
    }
    public TLParen GetLParen ()
    {
        return _l_paren_;
    }

    public void SetLParen (TLParen node)
    {
        if(_l_paren_ != null)
        {
            _l_paren_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_paren_ = node;
    }
    public PBoolExp GetBoolExp ()
    {
        return _bool_exp_;
    }

    public void SetBoolExp (PBoolExp node)
    {
        if(_bool_exp_ != null)
        {
            _bool_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bool_exp_ = node;
    }
    public TRParen GetRParen ()
    {
        return _r_paren_;
    }

    public void SetRParen (TRParen node)
    {
        if(_r_paren_ != null)
        {
            _r_paren_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_paren_ = node;
    }
    public TLBrace GetLBrace ()
    {
        return _l_brace_;
    }

    public void SetLBrace (TLBrace node)
    {
        if(_l_brace_ != null)
        {
            _l_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_brace_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TRBrace GetRBrace ()
    {
        return _r_brace_;
    }

    public void SetRBrace (TRBrace node)
    {
        if(_r_brace_ != null)
        {
            _r_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_rw_while_)
            + ToString (_l_paren_)
            + ToString (_bool_exp_)
            + ToString (_r_paren_)
            + ToString (_l_brace_)
            + ToString (_statements_)
            + ToString (_r_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _rw_while_ == child )
        {
            _rw_while_ = null;
            return;
        }
        if ( _l_paren_ == child )
        {
            _l_paren_ = null;
            return;
        }
        if ( _bool_exp_ == child )
        {
            _bool_exp_ = null;
            return;
        }
        if ( _r_paren_ == child )
        {
            _r_paren_ = null;
            return;
        }
        if ( _l_brace_ == child )
        {
            _l_brace_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _r_brace_ == child )
        {
            _r_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _rw_while_ == oldChild )
        {
            SetRwWhile ((TRwWhile) newChild);
            return;
        }
        if ( _l_paren_ == oldChild )
        {
            SetLParen ((TLParen) newChild);
            return;
        }
        if ( _bool_exp_ == oldChild )
        {
            SetBoolExp ((PBoolExp) newChild);
            return;
        }
        if ( _r_paren_ == oldChild )
        {
            SetRParen ((TRParen) newChild);
            return;
        }
        if ( _l_brace_ == oldChild )
        {
            SetLBrace ((TLBrace) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _r_brace_ == oldChild )
        {
            SetRBrace ((TRBrace) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PFile _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PFile _base_,
        EOF _eof_)
    {
        SetPFile(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PFile) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PFile GetPFile()
    {
        return _base_;
    }
    public void SetPFile(PFile node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPFile((PFile) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
