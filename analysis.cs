/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using CS426.node;

namespace CS426.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAFile(AFile node);
    void CaseASomeConstDeclarations(ASomeConstDeclarations node);
    void CaseANoneConstDeclarations(ANoneConstDeclarations node);
    void CaseASomeFunctDeclarations(ASomeFunctDeclarations node);
    void CaseANoneFunctDeclarations(ANoneFunctDeclarations node);
    void CaseAMainDeclaration(AMainDeclaration node);
    void CaseAMultBoolExp(AMultBoolExp node);
    void CaseASingleBoolExp(ASingleBoolExp node);
    void CaseAMultBoolTerm(AMultBoolTerm node);
    void CaseASingleBoolTerm(ASingleBoolTerm node);
    void CaseANegBoolNot(ANegBoolNot node);
    void CaseAPosBoolNot(APosBoolNot node);
    void CaseAEqualBoolComp(AEqualBoolComp node);
    void CaseANotEqualBoolComp(ANotEqualBoolComp node);
    void CaseASoloBoolComp(ASoloBoolComp node);
    void CaseASomeBoolParens(ASomeBoolParens node);
    void CaseANoneBoolParens(ANoneBoolParens node);
    void CaseALessNumComp(ALessNumComp node);
    void CaseALessEqualNumComp(ALessEqualNumComp node);
    void CaseAGreaterNumComp(AGreaterNumComp node);
    void CaseAGreaterEqualNumComp(AGreaterEqualNumComp node);
    void CaseAEqualNumComp(AEqualNumComp node);
    void CaseANotEqualNumComp(ANotEqualNumComp node);
    void CaseAPlusExpression(APlusExpression node);
    void CaseAMinusExpression(AMinusExpression node);
    void CaseASoloExpression(ASoloExpression node);
    void CaseAMultTerm(AMultTerm node);
    void CaseADivTerm(ADivTerm node);
    void CaseASingleTerm(ASingleTerm node);
    void CaseANegNegation(ANegNegation node);
    void CaseAPosNegation(APosNegation node);
    void CaseASomeParentheticalExp(ASomeParentheticalExp node);
    void CaseANoneParentheticalExp(ANoneParentheticalExp node);
    void CaseAVarOperand(AVarOperand node);
    void CaseALitOperand(ALitOperand node);
    void CaseAIntLiteral(AIntLiteral node);
    void CaseAFloatLiteral(AFloatLiteral node);
    void CaseAStrLiteral(AStrLiteral node);
    void CaseASomeParamDeclarations(ASomeParamDeclarations node);
    void CaseAOneParamDeclarations(AOneParamDeclarations node);
    void CaseANoneParamDeclarations(ANoneParamDeclarations node);
    void CaseAParamDeclaration(AParamDeclaration node);
    void CaseASomeStatements(ASomeStatements node);
    void CaseANoneStatements(ANoneStatements node);
    void CaseADeclarationStatement(ADeclarationStatement node);
    void CaseACallStatement(ACallStatement node);
    void CaseAAssignmentStatement(AAssignmentStatement node);
    void CaseAIfStatement(AIfStatement node);
    void CaseALoopStatement(ALoopStatement node);
    void CaseAVarDec(AVarDec node);
    void CaseAOptForOptAssignment(AOptForOptAssignment node);
    void CaseAOptAgainstOptAssignment(AOptAgainstOptAssignment node);
    void CaseAFunctCall(AFunctCall node);
    void CaseASomeCallParams(ASomeCallParams node);
    void CaseAOneCallParams(AOneCallParams node);
    void CaseANoneCallParams(ANoneCallParams node);
    void CaseAAssignment(AAssignment node);
    void CaseAIfStmt(AIfStmt node);
    void CaseAYesElseElseStmt(AYesElseElseStmt node);
    void CaseANoElseElseStmt(ANoElseElseStmt node);
    void CaseALoopStmt(ALoopStmt node);

    void CaseTAssign(TAssign node);
    void CaseTPlusSign(TPlusSign node);
    void CaseTStar(TStar node);
    void CaseTSemiColon(TSemiColon node);
    void CaseTLParen(TLParen node);
    void CaseTRParen(TRParen node);
    void CaseTMinusSign(TMinusSign node);
    void CaseTSlash(TSlash node);
    void CaseTLtSign(TLtSign node);
    void CaseTLeqSign(TLeqSign node);
    void CaseTGtSign(TGtSign node);
    void CaseTGeqSign(TGeqSign node);
    void CaseTEqSign(TEqSign node);
    void CaseTNeqSign(TNeqSign node);
    void CaseTNotSign(TNotSign node);
    void CaseTAndSign(TAndSign node);
    void CaseTOrSign(TOrSign node);
    void CaseTLBrace(TLBrace node);
    void CaseTRBrace(TRBrace node);
    void CaseTComma(TComma node);
    void CaseTRwType(TRwType node);
    void CaseTRwIf(TRwIf node);
    void CaseTRwElse(TRwElse node);
    void CaseTRwWhile(TRwWhile node);
    void CaseTRwConst(TRwConst node);
    void CaseTRwFunction(TRwFunction node);
    void CaseTRwMain(TRwMain node);
    void CaseTLitInteger(TLitInteger node);
    void CaseTLitFloat(TLitFloat node);
    void CaseTLitStr(TLitStr node);
    void CaseTId(TId node);
    void CaseTComment(TComment node);
    void CaseTWhitespace(TWhitespace node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAFile(AFile node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASomeConstDeclarations(ASomeConstDeclarations node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneConstDeclarations(ANoneConstDeclarations node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASomeFunctDeclarations(ASomeFunctDeclarations node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneFunctDeclarations(ANoneFunctDeclarations node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMainDeclaration(AMainDeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultBoolExp(AMultBoolExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleBoolExp(ASingleBoolExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultBoolTerm(AMultBoolTerm node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleBoolTerm(ASingleBoolTerm node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANegBoolNot(ANegBoolNot node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPosBoolNot(APosBoolNot node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEqualBoolComp(AEqualBoolComp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANotEqualBoolComp(ANotEqualBoolComp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASoloBoolComp(ASoloBoolComp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASomeBoolParens(ASomeBoolParens node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneBoolParens(ANoneBoolParens node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessNumComp(ALessNumComp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessEqualNumComp(ALessEqualNumComp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreaterNumComp(AGreaterNumComp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreaterEqualNumComp(AGreaterEqualNumComp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEqualNumComp(AEqualNumComp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANotEqualNumComp(ANotEqualNumComp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPlusExpression(APlusExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMinusExpression(AMinusExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASoloExpression(ASoloExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultTerm(AMultTerm node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADivTerm(ADivTerm node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleTerm(ASingleTerm node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANegNegation(ANegNegation node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPosNegation(APosNegation node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASomeParentheticalExp(ASomeParentheticalExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneParentheticalExp(ANoneParentheticalExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVarOperand(AVarOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALitOperand(ALitOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntLiteral(AIntLiteral node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatLiteral(AFloatLiteral node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStrLiteral(AStrLiteral node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASomeParamDeclarations(ASomeParamDeclarations node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOneParamDeclarations(AOneParamDeclarations node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneParamDeclarations(ANoneParamDeclarations node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParamDeclaration(AParamDeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASomeStatements(ASomeStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneStatements(ANoneStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclarationStatement(ADeclarationStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACallStatement(ACallStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfStatement(AIfStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALoopStatement(ALoopStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVarDec(AVarDec node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOptForOptAssignment(AOptForOptAssignment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOptAgainstOptAssignment(AOptAgainstOptAssignment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctCall(AFunctCall node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASomeCallParams(ASomeCallParams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOneCallParams(AOneCallParams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneCallParams(ANoneCallParams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignment(AAssignment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfStmt(AIfStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAYesElseElseStmt(AYesElseElseStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoElseElseStmt(ANoElseElseStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALoopStmt(ALoopStmt node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTAssign(TAssign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlusSign(TPlusSign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTStar(TStar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSemiColon(TSemiColon node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLParen(TLParen node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRParen(TRParen node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMinusSign(TMinusSign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSlash(TSlash node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLtSign(TLtSign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLeqSign(TLeqSign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGtSign(TGtSign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGeqSign(TGeqSign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEqSign(TEqSign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNeqSign(TNeqSign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNotSign(TNotSign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAndSign(TAndSign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOrSign(TOrSign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLBrace(TLBrace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRBrace(TRBrace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComma(TComma node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRwType(TRwType node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRwIf(TRwIf node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRwElse(TRwElse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRwWhile(TRwWhile node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRwConst(TRwConst node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRwFunction(TRwFunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRwMain(TRwMain node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLitInteger(TLitInteger node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLitFloat(TLitFloat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLitStr(TLitStr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTId(TId node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComment(TComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWhitespace(TWhitespace node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPFile().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAFile(AFile node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFile(AFile node)
    {
        DefaultOut(node);
    }

    public override void CaseAFile(AFile node)
    {
        InAFile(node);
        if(node.GetConstDeclarations() != null)
        {
            node.GetConstDeclarations().Apply(this);
        }
        if(node.GetFunctDeclarations() != null)
        {
            node.GetFunctDeclarations().Apply(this);
        }
        if(node.GetMainDeclaration() != null)
        {
            node.GetMainDeclaration().Apply(this);
        }
        OutAFile(node);
    }
    public virtual void InASomeConstDeclarations(ASomeConstDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutASomeConstDeclarations(ASomeConstDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseASomeConstDeclarations(ASomeConstDeclarations node)
    {
        InASomeConstDeclarations(node);
        if(node.GetRwConst() != null)
        {
            node.GetRwConst().Apply(this);
        }
        if(node.GetRwType() != null)
        {
            node.GetRwType().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetSemiColon() != null)
        {
            node.GetSemiColon().Apply(this);
        }
        if(node.GetConstDeclarations() != null)
        {
            node.GetConstDeclarations().Apply(this);
        }
        OutASomeConstDeclarations(node);
    }
    public virtual void InANoneConstDeclarations(ANoneConstDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneConstDeclarations(ANoneConstDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneConstDeclarations(ANoneConstDeclarations node)
    {
        InANoneConstDeclarations(node);
        OutANoneConstDeclarations(node);
    }
    public virtual void InASomeFunctDeclarations(ASomeFunctDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutASomeFunctDeclarations(ASomeFunctDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseASomeFunctDeclarations(ASomeFunctDeclarations node)
    {
        InASomeFunctDeclarations(node);
        if(node.GetFunctDeclarations() != null)
        {
            node.GetFunctDeclarations().Apply(this);
        }
        if(node.GetRwFunction() != null)
        {
            node.GetRwFunction().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetLParen() != null)
        {
            node.GetLParen().Apply(this);
        }
        if(node.GetParamDeclarations() != null)
        {
            node.GetParamDeclarations().Apply(this);
        }
        if(node.GetRParen() != null)
        {
            node.GetRParen().Apply(this);
        }
        if(node.GetLBrace() != null)
        {
            node.GetLBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRBrace() != null)
        {
            node.GetRBrace().Apply(this);
        }
        OutASomeFunctDeclarations(node);
    }
    public virtual void InANoneFunctDeclarations(ANoneFunctDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneFunctDeclarations(ANoneFunctDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneFunctDeclarations(ANoneFunctDeclarations node)
    {
        InANoneFunctDeclarations(node);
        OutANoneFunctDeclarations(node);
    }
    public virtual void InAMainDeclaration(AMainDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainDeclaration(AMainDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainDeclaration(AMainDeclaration node)
    {
        InAMainDeclaration(node);
        if(node.GetRwFunction() != null)
        {
            node.GetRwFunction().Apply(this);
        }
        if(node.GetRwMain() != null)
        {
            node.GetRwMain().Apply(this);
        }
        if(node.GetLParen() != null)
        {
            node.GetLParen().Apply(this);
        }
        if(node.GetRParen() != null)
        {
            node.GetRParen().Apply(this);
        }
        if(node.GetLBrace() != null)
        {
            node.GetLBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRBrace() != null)
        {
            node.GetRBrace().Apply(this);
        }
        OutAMainDeclaration(node);
    }
    public virtual void InAMultBoolExp(AMultBoolExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultBoolExp(AMultBoolExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultBoolExp(AMultBoolExp node)
    {
        InAMultBoolExp(node);
        if(node.GetBoolExp() != null)
        {
            node.GetBoolExp().Apply(this);
        }
        if(node.GetOrSign() != null)
        {
            node.GetOrSign().Apply(this);
        }
        if(node.GetBoolTerm() != null)
        {
            node.GetBoolTerm().Apply(this);
        }
        OutAMultBoolExp(node);
    }
    public virtual void InASingleBoolExp(ASingleBoolExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleBoolExp(ASingleBoolExp node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleBoolExp(ASingleBoolExp node)
    {
        InASingleBoolExp(node);
        if(node.GetBoolTerm() != null)
        {
            node.GetBoolTerm().Apply(this);
        }
        OutASingleBoolExp(node);
    }
    public virtual void InAMultBoolTerm(AMultBoolTerm node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultBoolTerm(AMultBoolTerm node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultBoolTerm(AMultBoolTerm node)
    {
        InAMultBoolTerm(node);
        if(node.GetBoolTerm() != null)
        {
            node.GetBoolTerm().Apply(this);
        }
        if(node.GetAndSign() != null)
        {
            node.GetAndSign().Apply(this);
        }
        if(node.GetBoolNot() != null)
        {
            node.GetBoolNot().Apply(this);
        }
        OutAMultBoolTerm(node);
    }
    public virtual void InASingleBoolTerm(ASingleBoolTerm node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleBoolTerm(ASingleBoolTerm node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleBoolTerm(ASingleBoolTerm node)
    {
        InASingleBoolTerm(node);
        if(node.GetBoolNot() != null)
        {
            node.GetBoolNot().Apply(this);
        }
        OutASingleBoolTerm(node);
    }
    public virtual void InANegBoolNot(ANegBoolNot node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegBoolNot(ANegBoolNot node)
    {
        DefaultOut(node);
    }

    public override void CaseANegBoolNot(ANegBoolNot node)
    {
        InANegBoolNot(node);
        if(node.GetNotSign() != null)
        {
            node.GetNotSign().Apply(this);
        }
        if(node.GetBoolComp() != null)
        {
            node.GetBoolComp().Apply(this);
        }
        OutANegBoolNot(node);
    }
    public virtual void InAPosBoolNot(APosBoolNot node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPosBoolNot(APosBoolNot node)
    {
        DefaultOut(node);
    }

    public override void CaseAPosBoolNot(APosBoolNot node)
    {
        InAPosBoolNot(node);
        if(node.GetBoolComp() != null)
        {
            node.GetBoolComp().Apply(this);
        }
        OutAPosBoolNot(node);
    }
    public virtual void InAEqualBoolComp(AEqualBoolComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualBoolComp(AEqualBoolComp node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualBoolComp(AEqualBoolComp node)
    {
        InAEqualBoolComp(node);
        if(node.GetBoolComp() != null)
        {
            node.GetBoolComp().Apply(this);
        }
        if(node.GetEqSign() != null)
        {
            node.GetEqSign().Apply(this);
        }
        if(node.GetBoolParens() != null)
        {
            node.GetBoolParens().Apply(this);
        }
        OutAEqualBoolComp(node);
    }
    public virtual void InANotEqualBoolComp(ANotEqualBoolComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotEqualBoolComp(ANotEqualBoolComp node)
    {
        DefaultOut(node);
    }

    public override void CaseANotEqualBoolComp(ANotEqualBoolComp node)
    {
        InANotEqualBoolComp(node);
        if(node.GetBoolComp() != null)
        {
            node.GetBoolComp().Apply(this);
        }
        if(node.GetNeqSign() != null)
        {
            node.GetNeqSign().Apply(this);
        }
        if(node.GetBoolParens() != null)
        {
            node.GetBoolParens().Apply(this);
        }
        OutANotEqualBoolComp(node);
    }
    public virtual void InASoloBoolComp(ASoloBoolComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutASoloBoolComp(ASoloBoolComp node)
    {
        DefaultOut(node);
    }

    public override void CaseASoloBoolComp(ASoloBoolComp node)
    {
        InASoloBoolComp(node);
        if(node.GetBoolParens() != null)
        {
            node.GetBoolParens().Apply(this);
        }
        OutASoloBoolComp(node);
    }
    public virtual void InASomeBoolParens(ASomeBoolParens node)
    {
        DefaultIn(node);
    }

    public virtual void OutASomeBoolParens(ASomeBoolParens node)
    {
        DefaultOut(node);
    }

    public override void CaseASomeBoolParens(ASomeBoolParens node)
    {
        InASomeBoolParens(node);
        if(node.GetLParen() != null)
        {
            node.GetLParen().Apply(this);
        }
        if(node.GetBoolExp() != null)
        {
            node.GetBoolExp().Apply(this);
        }
        if(node.GetRParen() != null)
        {
            node.GetRParen().Apply(this);
        }
        OutASomeBoolParens(node);
    }
    public virtual void InANoneBoolParens(ANoneBoolParens node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneBoolParens(ANoneBoolParens node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneBoolParens(ANoneBoolParens node)
    {
        InANoneBoolParens(node);
        if(node.GetNumComp() != null)
        {
            node.GetNumComp().Apply(this);
        }
        OutANoneBoolParens(node);
    }
    public virtual void InALessNumComp(ALessNumComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessNumComp(ALessNumComp node)
    {
        DefaultOut(node);
    }

    public override void CaseALessNumComp(ALessNumComp node)
    {
        InALessNumComp(node);
        if(node.GetLhs() != null)
        {
            node.GetLhs().Apply(this);
        }
        if(node.GetLtSign() != null)
        {
            node.GetLtSign().Apply(this);
        }
        if(node.GetRhs() != null)
        {
            node.GetRhs().Apply(this);
        }
        OutALessNumComp(node);
    }
    public virtual void InALessEqualNumComp(ALessEqualNumComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessEqualNumComp(ALessEqualNumComp node)
    {
        DefaultOut(node);
    }

    public override void CaseALessEqualNumComp(ALessEqualNumComp node)
    {
        InALessEqualNumComp(node);
        if(node.GetLhs() != null)
        {
            node.GetLhs().Apply(this);
        }
        if(node.GetLeqSign() != null)
        {
            node.GetLeqSign().Apply(this);
        }
        if(node.GetRhs() != null)
        {
            node.GetRhs().Apply(this);
        }
        OutALessEqualNumComp(node);
    }
    public virtual void InAGreaterNumComp(AGreaterNumComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterNumComp(AGreaterNumComp node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterNumComp(AGreaterNumComp node)
    {
        InAGreaterNumComp(node);
        if(node.GetLhs() != null)
        {
            node.GetLhs().Apply(this);
        }
        if(node.GetGtSign() != null)
        {
            node.GetGtSign().Apply(this);
        }
        if(node.GetRhs() != null)
        {
            node.GetRhs().Apply(this);
        }
        OutAGreaterNumComp(node);
    }
    public virtual void InAGreaterEqualNumComp(AGreaterEqualNumComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterEqualNumComp(AGreaterEqualNumComp node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterEqualNumComp(AGreaterEqualNumComp node)
    {
        InAGreaterEqualNumComp(node);
        if(node.GetLhs() != null)
        {
            node.GetLhs().Apply(this);
        }
        if(node.GetGeqSign() != null)
        {
            node.GetGeqSign().Apply(this);
        }
        if(node.GetRhs() != null)
        {
            node.GetRhs().Apply(this);
        }
        OutAGreaterEqualNumComp(node);
    }
    public virtual void InAEqualNumComp(AEqualNumComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualNumComp(AEqualNumComp node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualNumComp(AEqualNumComp node)
    {
        InAEqualNumComp(node);
        if(node.GetLhs() != null)
        {
            node.GetLhs().Apply(this);
        }
        if(node.GetEqSign() != null)
        {
            node.GetEqSign().Apply(this);
        }
        if(node.GetRhs() != null)
        {
            node.GetRhs().Apply(this);
        }
        OutAEqualNumComp(node);
    }
    public virtual void InANotEqualNumComp(ANotEqualNumComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotEqualNumComp(ANotEqualNumComp node)
    {
        DefaultOut(node);
    }

    public override void CaseANotEqualNumComp(ANotEqualNumComp node)
    {
        InANotEqualNumComp(node);
        if(node.GetLhs() != null)
        {
            node.GetLhs().Apply(this);
        }
        if(node.GetNeqSign() != null)
        {
            node.GetNeqSign().Apply(this);
        }
        if(node.GetRhs() != null)
        {
            node.GetRhs().Apply(this);
        }
        OutANotEqualNumComp(node);
    }
    public virtual void InAPlusExpression(APlusExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPlusExpression(APlusExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPlusExpression(APlusExpression node)
    {
        InAPlusExpression(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetPlusSign() != null)
        {
            node.GetPlusSign().Apply(this);
        }
        if(node.GetTerm() != null)
        {
            node.GetTerm().Apply(this);
        }
        OutAPlusExpression(node);
    }
    public virtual void InAMinusExpression(AMinusExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMinusExpression(AMinusExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAMinusExpression(AMinusExpression node)
    {
        InAMinusExpression(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetMinusSign() != null)
        {
            node.GetMinusSign().Apply(this);
        }
        if(node.GetTerm() != null)
        {
            node.GetTerm().Apply(this);
        }
        OutAMinusExpression(node);
    }
    public virtual void InASoloExpression(ASoloExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutASoloExpression(ASoloExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseASoloExpression(ASoloExpression node)
    {
        InASoloExpression(node);
        if(node.GetTerm() != null)
        {
            node.GetTerm().Apply(this);
        }
        OutASoloExpression(node);
    }
    public virtual void InAMultTerm(AMultTerm node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultTerm(AMultTerm node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultTerm(AMultTerm node)
    {
        InAMultTerm(node);
        if(node.GetTerm() != null)
        {
            node.GetTerm().Apply(this);
        }
        if(node.GetStar() != null)
        {
            node.GetStar().Apply(this);
        }
        if(node.GetNegation() != null)
        {
            node.GetNegation().Apply(this);
        }
        OutAMultTerm(node);
    }
    public virtual void InADivTerm(ADivTerm node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivTerm(ADivTerm node)
    {
        DefaultOut(node);
    }

    public override void CaseADivTerm(ADivTerm node)
    {
        InADivTerm(node);
        if(node.GetTerm() != null)
        {
            node.GetTerm().Apply(this);
        }
        if(node.GetSlash() != null)
        {
            node.GetSlash().Apply(this);
        }
        if(node.GetNegation() != null)
        {
            node.GetNegation().Apply(this);
        }
        OutADivTerm(node);
    }
    public virtual void InASingleTerm(ASingleTerm node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleTerm(ASingleTerm node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleTerm(ASingleTerm node)
    {
        InASingleTerm(node);
        if(node.GetNegation() != null)
        {
            node.GetNegation().Apply(this);
        }
        OutASingleTerm(node);
    }
    public virtual void InANegNegation(ANegNegation node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegNegation(ANegNegation node)
    {
        DefaultOut(node);
    }

    public override void CaseANegNegation(ANegNegation node)
    {
        InANegNegation(node);
        if(node.GetMinusSign() != null)
        {
            node.GetMinusSign().Apply(this);
        }
        if(node.GetParentheticalExp() != null)
        {
            node.GetParentheticalExp().Apply(this);
        }
        OutANegNegation(node);
    }
    public virtual void InAPosNegation(APosNegation node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPosNegation(APosNegation node)
    {
        DefaultOut(node);
    }

    public override void CaseAPosNegation(APosNegation node)
    {
        InAPosNegation(node);
        if(node.GetParentheticalExp() != null)
        {
            node.GetParentheticalExp().Apply(this);
        }
        OutAPosNegation(node);
    }
    public virtual void InASomeParentheticalExp(ASomeParentheticalExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutASomeParentheticalExp(ASomeParentheticalExp node)
    {
        DefaultOut(node);
    }

    public override void CaseASomeParentheticalExp(ASomeParentheticalExp node)
    {
        InASomeParentheticalExp(node);
        if(node.GetLParen() != null)
        {
            node.GetLParen().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetRParen() != null)
        {
            node.GetRParen().Apply(this);
        }
        OutASomeParentheticalExp(node);
    }
    public virtual void InANoneParentheticalExp(ANoneParentheticalExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneParentheticalExp(ANoneParentheticalExp node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneParentheticalExp(ANoneParentheticalExp node)
    {
        InANoneParentheticalExp(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutANoneParentheticalExp(node);
    }
    public virtual void InAVarOperand(AVarOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarOperand(AVarOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarOperand(AVarOperand node)
    {
        InAVarOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVarOperand(node);
    }
    public virtual void InALitOperand(ALitOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutALitOperand(ALitOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseALitOperand(ALitOperand node)
    {
        InALitOperand(node);
        if(node.GetLiteral() != null)
        {
            node.GetLiteral().Apply(this);
        }
        OutALitOperand(node);
    }
    public virtual void InAIntLiteral(AIntLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntLiteral(AIntLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntLiteral(AIntLiteral node)
    {
        InAIntLiteral(node);
        if(node.GetLitInteger() != null)
        {
            node.GetLitInteger().Apply(this);
        }
        OutAIntLiteral(node);
    }
    public virtual void InAFloatLiteral(AFloatLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatLiteral(AFloatLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatLiteral(AFloatLiteral node)
    {
        InAFloatLiteral(node);
        if(node.GetLitFloat() != null)
        {
            node.GetLitFloat().Apply(this);
        }
        OutAFloatLiteral(node);
    }
    public virtual void InAStrLiteral(AStrLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStrLiteral(AStrLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseAStrLiteral(AStrLiteral node)
    {
        InAStrLiteral(node);
        if(node.GetLitStr() != null)
        {
            node.GetLitStr().Apply(this);
        }
        OutAStrLiteral(node);
    }
    public virtual void InASomeParamDeclarations(ASomeParamDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutASomeParamDeclarations(ASomeParamDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseASomeParamDeclarations(ASomeParamDeclarations node)
    {
        InASomeParamDeclarations(node);
        if(node.GetParamDeclarations() != null)
        {
            node.GetParamDeclarations().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetParamDeclaration() != null)
        {
            node.GetParamDeclaration().Apply(this);
        }
        OutASomeParamDeclarations(node);
    }
    public virtual void InAOneParamDeclarations(AOneParamDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneParamDeclarations(AOneParamDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneParamDeclarations(AOneParamDeclarations node)
    {
        InAOneParamDeclarations(node);
        if(node.GetParamDeclaration() != null)
        {
            node.GetParamDeclaration().Apply(this);
        }
        OutAOneParamDeclarations(node);
    }
    public virtual void InANoneParamDeclarations(ANoneParamDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneParamDeclarations(ANoneParamDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneParamDeclarations(ANoneParamDeclarations node)
    {
        InANoneParamDeclarations(node);
        OutANoneParamDeclarations(node);
    }
    public virtual void InAParamDeclaration(AParamDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParamDeclaration(AParamDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAParamDeclaration(AParamDeclaration node)
    {
        InAParamDeclaration(node);
        if(node.GetRwType() != null)
        {
            node.GetRwType().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAParamDeclaration(node);
    }
    public virtual void InASomeStatements(ASomeStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutASomeStatements(ASomeStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseASomeStatements(ASomeStatements node)
    {
        InASomeStatements(node);
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        OutASomeStatements(node);
    }
    public virtual void InANoneStatements(ANoneStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneStatements(ANoneStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneStatements(ANoneStatements node)
    {
        InANoneStatements(node);
        OutANoneStatements(node);
    }
    public virtual void InADeclarationStatement(ADeclarationStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationStatement(ADeclarationStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationStatement(ADeclarationStatement node)
    {
        InADeclarationStatement(node);
        if(node.GetVarDec() != null)
        {
            node.GetVarDec().Apply(this);
        }
        OutADeclarationStatement(node);
    }
    public virtual void InACallStatement(ACallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutACallStatement(ACallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseACallStatement(ACallStatement node)
    {
        InACallStatement(node);
        if(node.GetFunctCall() != null)
        {
            node.GetFunctCall().Apply(this);
        }
        OutACallStatement(node);
    }
    public virtual void InAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        InAAssignmentStatement(node);
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        OutAAssignmentStatement(node);
    }
    public virtual void InAIfStatement(AIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStatement(AIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStatement(AIfStatement node)
    {
        InAIfStatement(node);
        if(node.GetIfStmt() != null)
        {
            node.GetIfStmt().Apply(this);
        }
        OutAIfStatement(node);
    }
    public virtual void InALoopStatement(ALoopStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutALoopStatement(ALoopStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseALoopStatement(ALoopStatement node)
    {
        InALoopStatement(node);
        if(node.GetLoopStmt() != null)
        {
            node.GetLoopStmt().Apply(this);
        }
        OutALoopStatement(node);
    }
    public virtual void InAVarDec(AVarDec node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarDec(AVarDec node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarDec(AVarDec node)
    {
        InAVarDec(node);
        if(node.GetRwType() != null)
        {
            node.GetRwType().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetOptAssignment() != null)
        {
            node.GetOptAssignment().Apply(this);
        }
        if(node.GetSemiColon() != null)
        {
            node.GetSemiColon().Apply(this);
        }
        OutAVarDec(node);
    }
    public virtual void InAOptForOptAssignment(AOptForOptAssignment node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOptForOptAssignment(AOptForOptAssignment node)
    {
        DefaultOut(node);
    }

    public override void CaseAOptForOptAssignment(AOptForOptAssignment node)
    {
        InAOptForOptAssignment(node);
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAOptForOptAssignment(node);
    }
    public virtual void InAOptAgainstOptAssignment(AOptAgainstOptAssignment node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOptAgainstOptAssignment(AOptAgainstOptAssignment node)
    {
        DefaultOut(node);
    }

    public override void CaseAOptAgainstOptAssignment(AOptAgainstOptAssignment node)
    {
        InAOptAgainstOptAssignment(node);
        OutAOptAgainstOptAssignment(node);
    }
    public virtual void InAFunctCall(AFunctCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctCall(AFunctCall node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctCall(AFunctCall node)
    {
        InAFunctCall(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetLParen() != null)
        {
            node.GetLParen().Apply(this);
        }
        if(node.GetCallParams() != null)
        {
            node.GetCallParams().Apply(this);
        }
        if(node.GetRParen() != null)
        {
            node.GetRParen().Apply(this);
        }
        if(node.GetSemiColon() != null)
        {
            node.GetSemiColon().Apply(this);
        }
        OutAFunctCall(node);
    }
    public virtual void InASomeCallParams(ASomeCallParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutASomeCallParams(ASomeCallParams node)
    {
        DefaultOut(node);
    }

    public override void CaseASomeCallParams(ASomeCallParams node)
    {
        InASomeCallParams(node);
        if(node.GetCallParams() != null)
        {
            node.GetCallParams().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutASomeCallParams(node);
    }
    public virtual void InAOneCallParams(AOneCallParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneCallParams(AOneCallParams node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneCallParams(AOneCallParams node)
    {
        InAOneCallParams(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAOneCallParams(node);
    }
    public virtual void InANoneCallParams(ANoneCallParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneCallParams(ANoneCallParams node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneCallParams(ANoneCallParams node)
    {
        InANoneCallParams(node);
        OutANoneCallParams(node);
    }
    public virtual void InAAssignment(AAssignment node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignment(AAssignment node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignment(AAssignment node)
    {
        InAAssignment(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetSemiColon() != null)
        {
            node.GetSemiColon().Apply(this);
        }
        OutAAssignment(node);
    }
    public virtual void InAIfStmt(AIfStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStmt(AIfStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStmt(AIfStmt node)
    {
        InAIfStmt(node);
        if(node.GetRwIf() != null)
        {
            node.GetRwIf().Apply(this);
        }
        if(node.GetLParen() != null)
        {
            node.GetLParen().Apply(this);
        }
        if(node.GetBoolExp() != null)
        {
            node.GetBoolExp().Apply(this);
        }
        if(node.GetRParen() != null)
        {
            node.GetRParen().Apply(this);
        }
        if(node.GetLBrace() != null)
        {
            node.GetLBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRBrace() != null)
        {
            node.GetRBrace().Apply(this);
        }
        if(node.GetElseStmt() != null)
        {
            node.GetElseStmt().Apply(this);
        }
        OutAIfStmt(node);
    }
    public virtual void InAYesElseElseStmt(AYesElseElseStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAYesElseElseStmt(AYesElseElseStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAYesElseElseStmt(AYesElseElseStmt node)
    {
        InAYesElseElseStmt(node);
        if(node.GetRwElse() != null)
        {
            node.GetRwElse().Apply(this);
        }
        if(node.GetLBrace() != null)
        {
            node.GetLBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRBrace() != null)
        {
            node.GetRBrace().Apply(this);
        }
        OutAYesElseElseStmt(node);
    }
    public virtual void InANoElseElseStmt(ANoElseElseStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoElseElseStmt(ANoElseElseStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseANoElseElseStmt(ANoElseElseStmt node)
    {
        InANoElseElseStmt(node);
        OutANoElseElseStmt(node);
    }
    public virtual void InALoopStmt(ALoopStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutALoopStmt(ALoopStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseALoopStmt(ALoopStmt node)
    {
        InALoopStmt(node);
        if(node.GetRwWhile() != null)
        {
            node.GetRwWhile().Apply(this);
        }
        if(node.GetLParen() != null)
        {
            node.GetLParen().Apply(this);
        }
        if(node.GetBoolExp() != null)
        {
            node.GetBoolExp().Apply(this);
        }
        if(node.GetRParen() != null)
        {
            node.GetRParen().Apply(this);
        }
        if(node.GetLBrace() != null)
        {
            node.GetLBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRBrace() != null)
        {
            node.GetRBrace().Apply(this);
        }
        OutALoopStmt(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPFile().Apply(this);
        OutStart(node);
    }

    public virtual void InAFile(AFile node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFile(AFile node)
    {
        DefaultOut(node);
    }

    public override void CaseAFile(AFile node)
    {
        InAFile(node);
        if(node.GetMainDeclaration() != null)
        {
            node.GetMainDeclaration().Apply(this);
        }
        if(node.GetFunctDeclarations() != null)
        {
            node.GetFunctDeclarations().Apply(this);
        }
        if(node.GetConstDeclarations() != null)
        {
            node.GetConstDeclarations().Apply(this);
        }
        OutAFile(node);
    }
    public virtual void InASomeConstDeclarations(ASomeConstDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutASomeConstDeclarations(ASomeConstDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseASomeConstDeclarations(ASomeConstDeclarations node)
    {
        InASomeConstDeclarations(node);
        if(node.GetConstDeclarations() != null)
        {
            node.GetConstDeclarations().Apply(this);
        }
        if(node.GetSemiColon() != null)
        {
            node.GetSemiColon().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetRwType() != null)
        {
            node.GetRwType().Apply(this);
        }
        if(node.GetRwConst() != null)
        {
            node.GetRwConst().Apply(this);
        }
        OutASomeConstDeclarations(node);
    }
    public virtual void InANoneConstDeclarations(ANoneConstDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneConstDeclarations(ANoneConstDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneConstDeclarations(ANoneConstDeclarations node)
    {
        InANoneConstDeclarations(node);
        OutANoneConstDeclarations(node);
    }
    public virtual void InASomeFunctDeclarations(ASomeFunctDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutASomeFunctDeclarations(ASomeFunctDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseASomeFunctDeclarations(ASomeFunctDeclarations node)
    {
        InASomeFunctDeclarations(node);
        if(node.GetRBrace() != null)
        {
            node.GetRBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLBrace() != null)
        {
            node.GetLBrace().Apply(this);
        }
        if(node.GetRParen() != null)
        {
            node.GetRParen().Apply(this);
        }
        if(node.GetParamDeclarations() != null)
        {
            node.GetParamDeclarations().Apply(this);
        }
        if(node.GetLParen() != null)
        {
            node.GetLParen().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetRwFunction() != null)
        {
            node.GetRwFunction().Apply(this);
        }
        if(node.GetFunctDeclarations() != null)
        {
            node.GetFunctDeclarations().Apply(this);
        }
        OutASomeFunctDeclarations(node);
    }
    public virtual void InANoneFunctDeclarations(ANoneFunctDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneFunctDeclarations(ANoneFunctDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneFunctDeclarations(ANoneFunctDeclarations node)
    {
        InANoneFunctDeclarations(node);
        OutANoneFunctDeclarations(node);
    }
    public virtual void InAMainDeclaration(AMainDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainDeclaration(AMainDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainDeclaration(AMainDeclaration node)
    {
        InAMainDeclaration(node);
        if(node.GetRBrace() != null)
        {
            node.GetRBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLBrace() != null)
        {
            node.GetLBrace().Apply(this);
        }
        if(node.GetRParen() != null)
        {
            node.GetRParen().Apply(this);
        }
        if(node.GetLParen() != null)
        {
            node.GetLParen().Apply(this);
        }
        if(node.GetRwMain() != null)
        {
            node.GetRwMain().Apply(this);
        }
        if(node.GetRwFunction() != null)
        {
            node.GetRwFunction().Apply(this);
        }
        OutAMainDeclaration(node);
    }
    public virtual void InAMultBoolExp(AMultBoolExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultBoolExp(AMultBoolExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultBoolExp(AMultBoolExp node)
    {
        InAMultBoolExp(node);
        if(node.GetBoolTerm() != null)
        {
            node.GetBoolTerm().Apply(this);
        }
        if(node.GetOrSign() != null)
        {
            node.GetOrSign().Apply(this);
        }
        if(node.GetBoolExp() != null)
        {
            node.GetBoolExp().Apply(this);
        }
        OutAMultBoolExp(node);
    }
    public virtual void InASingleBoolExp(ASingleBoolExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleBoolExp(ASingleBoolExp node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleBoolExp(ASingleBoolExp node)
    {
        InASingleBoolExp(node);
        if(node.GetBoolTerm() != null)
        {
            node.GetBoolTerm().Apply(this);
        }
        OutASingleBoolExp(node);
    }
    public virtual void InAMultBoolTerm(AMultBoolTerm node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultBoolTerm(AMultBoolTerm node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultBoolTerm(AMultBoolTerm node)
    {
        InAMultBoolTerm(node);
        if(node.GetBoolNot() != null)
        {
            node.GetBoolNot().Apply(this);
        }
        if(node.GetAndSign() != null)
        {
            node.GetAndSign().Apply(this);
        }
        if(node.GetBoolTerm() != null)
        {
            node.GetBoolTerm().Apply(this);
        }
        OutAMultBoolTerm(node);
    }
    public virtual void InASingleBoolTerm(ASingleBoolTerm node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleBoolTerm(ASingleBoolTerm node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleBoolTerm(ASingleBoolTerm node)
    {
        InASingleBoolTerm(node);
        if(node.GetBoolNot() != null)
        {
            node.GetBoolNot().Apply(this);
        }
        OutASingleBoolTerm(node);
    }
    public virtual void InANegBoolNot(ANegBoolNot node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegBoolNot(ANegBoolNot node)
    {
        DefaultOut(node);
    }

    public override void CaseANegBoolNot(ANegBoolNot node)
    {
        InANegBoolNot(node);
        if(node.GetBoolComp() != null)
        {
            node.GetBoolComp().Apply(this);
        }
        if(node.GetNotSign() != null)
        {
            node.GetNotSign().Apply(this);
        }
        OutANegBoolNot(node);
    }
    public virtual void InAPosBoolNot(APosBoolNot node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPosBoolNot(APosBoolNot node)
    {
        DefaultOut(node);
    }

    public override void CaseAPosBoolNot(APosBoolNot node)
    {
        InAPosBoolNot(node);
        if(node.GetBoolComp() != null)
        {
            node.GetBoolComp().Apply(this);
        }
        OutAPosBoolNot(node);
    }
    public virtual void InAEqualBoolComp(AEqualBoolComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualBoolComp(AEqualBoolComp node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualBoolComp(AEqualBoolComp node)
    {
        InAEqualBoolComp(node);
        if(node.GetBoolParens() != null)
        {
            node.GetBoolParens().Apply(this);
        }
        if(node.GetEqSign() != null)
        {
            node.GetEqSign().Apply(this);
        }
        if(node.GetBoolComp() != null)
        {
            node.GetBoolComp().Apply(this);
        }
        OutAEqualBoolComp(node);
    }
    public virtual void InANotEqualBoolComp(ANotEqualBoolComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotEqualBoolComp(ANotEqualBoolComp node)
    {
        DefaultOut(node);
    }

    public override void CaseANotEqualBoolComp(ANotEqualBoolComp node)
    {
        InANotEqualBoolComp(node);
        if(node.GetBoolParens() != null)
        {
            node.GetBoolParens().Apply(this);
        }
        if(node.GetNeqSign() != null)
        {
            node.GetNeqSign().Apply(this);
        }
        if(node.GetBoolComp() != null)
        {
            node.GetBoolComp().Apply(this);
        }
        OutANotEqualBoolComp(node);
    }
    public virtual void InASoloBoolComp(ASoloBoolComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutASoloBoolComp(ASoloBoolComp node)
    {
        DefaultOut(node);
    }

    public override void CaseASoloBoolComp(ASoloBoolComp node)
    {
        InASoloBoolComp(node);
        if(node.GetBoolParens() != null)
        {
            node.GetBoolParens().Apply(this);
        }
        OutASoloBoolComp(node);
    }
    public virtual void InASomeBoolParens(ASomeBoolParens node)
    {
        DefaultIn(node);
    }

    public virtual void OutASomeBoolParens(ASomeBoolParens node)
    {
        DefaultOut(node);
    }

    public override void CaseASomeBoolParens(ASomeBoolParens node)
    {
        InASomeBoolParens(node);
        if(node.GetRParen() != null)
        {
            node.GetRParen().Apply(this);
        }
        if(node.GetBoolExp() != null)
        {
            node.GetBoolExp().Apply(this);
        }
        if(node.GetLParen() != null)
        {
            node.GetLParen().Apply(this);
        }
        OutASomeBoolParens(node);
    }
    public virtual void InANoneBoolParens(ANoneBoolParens node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneBoolParens(ANoneBoolParens node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneBoolParens(ANoneBoolParens node)
    {
        InANoneBoolParens(node);
        if(node.GetNumComp() != null)
        {
            node.GetNumComp().Apply(this);
        }
        OutANoneBoolParens(node);
    }
    public virtual void InALessNumComp(ALessNumComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessNumComp(ALessNumComp node)
    {
        DefaultOut(node);
    }

    public override void CaseALessNumComp(ALessNumComp node)
    {
        InALessNumComp(node);
        if(node.GetRhs() != null)
        {
            node.GetRhs().Apply(this);
        }
        if(node.GetLtSign() != null)
        {
            node.GetLtSign().Apply(this);
        }
        if(node.GetLhs() != null)
        {
            node.GetLhs().Apply(this);
        }
        OutALessNumComp(node);
    }
    public virtual void InALessEqualNumComp(ALessEqualNumComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessEqualNumComp(ALessEqualNumComp node)
    {
        DefaultOut(node);
    }

    public override void CaseALessEqualNumComp(ALessEqualNumComp node)
    {
        InALessEqualNumComp(node);
        if(node.GetRhs() != null)
        {
            node.GetRhs().Apply(this);
        }
        if(node.GetLeqSign() != null)
        {
            node.GetLeqSign().Apply(this);
        }
        if(node.GetLhs() != null)
        {
            node.GetLhs().Apply(this);
        }
        OutALessEqualNumComp(node);
    }
    public virtual void InAGreaterNumComp(AGreaterNumComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterNumComp(AGreaterNumComp node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterNumComp(AGreaterNumComp node)
    {
        InAGreaterNumComp(node);
        if(node.GetRhs() != null)
        {
            node.GetRhs().Apply(this);
        }
        if(node.GetGtSign() != null)
        {
            node.GetGtSign().Apply(this);
        }
        if(node.GetLhs() != null)
        {
            node.GetLhs().Apply(this);
        }
        OutAGreaterNumComp(node);
    }
    public virtual void InAGreaterEqualNumComp(AGreaterEqualNumComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterEqualNumComp(AGreaterEqualNumComp node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterEqualNumComp(AGreaterEqualNumComp node)
    {
        InAGreaterEqualNumComp(node);
        if(node.GetRhs() != null)
        {
            node.GetRhs().Apply(this);
        }
        if(node.GetGeqSign() != null)
        {
            node.GetGeqSign().Apply(this);
        }
        if(node.GetLhs() != null)
        {
            node.GetLhs().Apply(this);
        }
        OutAGreaterEqualNumComp(node);
    }
    public virtual void InAEqualNumComp(AEqualNumComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualNumComp(AEqualNumComp node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualNumComp(AEqualNumComp node)
    {
        InAEqualNumComp(node);
        if(node.GetRhs() != null)
        {
            node.GetRhs().Apply(this);
        }
        if(node.GetEqSign() != null)
        {
            node.GetEqSign().Apply(this);
        }
        if(node.GetLhs() != null)
        {
            node.GetLhs().Apply(this);
        }
        OutAEqualNumComp(node);
    }
    public virtual void InANotEqualNumComp(ANotEqualNumComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotEqualNumComp(ANotEqualNumComp node)
    {
        DefaultOut(node);
    }

    public override void CaseANotEqualNumComp(ANotEqualNumComp node)
    {
        InANotEqualNumComp(node);
        if(node.GetRhs() != null)
        {
            node.GetRhs().Apply(this);
        }
        if(node.GetNeqSign() != null)
        {
            node.GetNeqSign().Apply(this);
        }
        if(node.GetLhs() != null)
        {
            node.GetLhs().Apply(this);
        }
        OutANotEqualNumComp(node);
    }
    public virtual void InAPlusExpression(APlusExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPlusExpression(APlusExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPlusExpression(APlusExpression node)
    {
        InAPlusExpression(node);
        if(node.GetTerm() != null)
        {
            node.GetTerm().Apply(this);
        }
        if(node.GetPlusSign() != null)
        {
            node.GetPlusSign().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAPlusExpression(node);
    }
    public virtual void InAMinusExpression(AMinusExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMinusExpression(AMinusExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAMinusExpression(AMinusExpression node)
    {
        InAMinusExpression(node);
        if(node.GetTerm() != null)
        {
            node.GetTerm().Apply(this);
        }
        if(node.GetMinusSign() != null)
        {
            node.GetMinusSign().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAMinusExpression(node);
    }
    public virtual void InASoloExpression(ASoloExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutASoloExpression(ASoloExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseASoloExpression(ASoloExpression node)
    {
        InASoloExpression(node);
        if(node.GetTerm() != null)
        {
            node.GetTerm().Apply(this);
        }
        OutASoloExpression(node);
    }
    public virtual void InAMultTerm(AMultTerm node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultTerm(AMultTerm node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultTerm(AMultTerm node)
    {
        InAMultTerm(node);
        if(node.GetNegation() != null)
        {
            node.GetNegation().Apply(this);
        }
        if(node.GetStar() != null)
        {
            node.GetStar().Apply(this);
        }
        if(node.GetTerm() != null)
        {
            node.GetTerm().Apply(this);
        }
        OutAMultTerm(node);
    }
    public virtual void InADivTerm(ADivTerm node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivTerm(ADivTerm node)
    {
        DefaultOut(node);
    }

    public override void CaseADivTerm(ADivTerm node)
    {
        InADivTerm(node);
        if(node.GetNegation() != null)
        {
            node.GetNegation().Apply(this);
        }
        if(node.GetSlash() != null)
        {
            node.GetSlash().Apply(this);
        }
        if(node.GetTerm() != null)
        {
            node.GetTerm().Apply(this);
        }
        OutADivTerm(node);
    }
    public virtual void InASingleTerm(ASingleTerm node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleTerm(ASingleTerm node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleTerm(ASingleTerm node)
    {
        InASingleTerm(node);
        if(node.GetNegation() != null)
        {
            node.GetNegation().Apply(this);
        }
        OutASingleTerm(node);
    }
    public virtual void InANegNegation(ANegNegation node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegNegation(ANegNegation node)
    {
        DefaultOut(node);
    }

    public override void CaseANegNegation(ANegNegation node)
    {
        InANegNegation(node);
        if(node.GetParentheticalExp() != null)
        {
            node.GetParentheticalExp().Apply(this);
        }
        if(node.GetMinusSign() != null)
        {
            node.GetMinusSign().Apply(this);
        }
        OutANegNegation(node);
    }
    public virtual void InAPosNegation(APosNegation node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPosNegation(APosNegation node)
    {
        DefaultOut(node);
    }

    public override void CaseAPosNegation(APosNegation node)
    {
        InAPosNegation(node);
        if(node.GetParentheticalExp() != null)
        {
            node.GetParentheticalExp().Apply(this);
        }
        OutAPosNegation(node);
    }
    public virtual void InASomeParentheticalExp(ASomeParentheticalExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutASomeParentheticalExp(ASomeParentheticalExp node)
    {
        DefaultOut(node);
    }

    public override void CaseASomeParentheticalExp(ASomeParentheticalExp node)
    {
        InASomeParentheticalExp(node);
        if(node.GetRParen() != null)
        {
            node.GetRParen().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetLParen() != null)
        {
            node.GetLParen().Apply(this);
        }
        OutASomeParentheticalExp(node);
    }
    public virtual void InANoneParentheticalExp(ANoneParentheticalExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneParentheticalExp(ANoneParentheticalExp node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneParentheticalExp(ANoneParentheticalExp node)
    {
        InANoneParentheticalExp(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutANoneParentheticalExp(node);
    }
    public virtual void InAVarOperand(AVarOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarOperand(AVarOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarOperand(AVarOperand node)
    {
        InAVarOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVarOperand(node);
    }
    public virtual void InALitOperand(ALitOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutALitOperand(ALitOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseALitOperand(ALitOperand node)
    {
        InALitOperand(node);
        if(node.GetLiteral() != null)
        {
            node.GetLiteral().Apply(this);
        }
        OutALitOperand(node);
    }
    public virtual void InAIntLiteral(AIntLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntLiteral(AIntLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntLiteral(AIntLiteral node)
    {
        InAIntLiteral(node);
        if(node.GetLitInteger() != null)
        {
            node.GetLitInteger().Apply(this);
        }
        OutAIntLiteral(node);
    }
    public virtual void InAFloatLiteral(AFloatLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatLiteral(AFloatLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatLiteral(AFloatLiteral node)
    {
        InAFloatLiteral(node);
        if(node.GetLitFloat() != null)
        {
            node.GetLitFloat().Apply(this);
        }
        OutAFloatLiteral(node);
    }
    public virtual void InAStrLiteral(AStrLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStrLiteral(AStrLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseAStrLiteral(AStrLiteral node)
    {
        InAStrLiteral(node);
        if(node.GetLitStr() != null)
        {
            node.GetLitStr().Apply(this);
        }
        OutAStrLiteral(node);
    }
    public virtual void InASomeParamDeclarations(ASomeParamDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutASomeParamDeclarations(ASomeParamDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseASomeParamDeclarations(ASomeParamDeclarations node)
    {
        InASomeParamDeclarations(node);
        if(node.GetParamDeclaration() != null)
        {
            node.GetParamDeclaration().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetParamDeclarations() != null)
        {
            node.GetParamDeclarations().Apply(this);
        }
        OutASomeParamDeclarations(node);
    }
    public virtual void InAOneParamDeclarations(AOneParamDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneParamDeclarations(AOneParamDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneParamDeclarations(AOneParamDeclarations node)
    {
        InAOneParamDeclarations(node);
        if(node.GetParamDeclaration() != null)
        {
            node.GetParamDeclaration().Apply(this);
        }
        OutAOneParamDeclarations(node);
    }
    public virtual void InANoneParamDeclarations(ANoneParamDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneParamDeclarations(ANoneParamDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneParamDeclarations(ANoneParamDeclarations node)
    {
        InANoneParamDeclarations(node);
        OutANoneParamDeclarations(node);
    }
    public virtual void InAParamDeclaration(AParamDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParamDeclaration(AParamDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAParamDeclaration(AParamDeclaration node)
    {
        InAParamDeclaration(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetRwType() != null)
        {
            node.GetRwType().Apply(this);
        }
        OutAParamDeclaration(node);
    }
    public virtual void InASomeStatements(ASomeStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutASomeStatements(ASomeStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseASomeStatements(ASomeStatements node)
    {
        InASomeStatements(node);
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        OutASomeStatements(node);
    }
    public virtual void InANoneStatements(ANoneStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneStatements(ANoneStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneStatements(ANoneStatements node)
    {
        InANoneStatements(node);
        OutANoneStatements(node);
    }
    public virtual void InADeclarationStatement(ADeclarationStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationStatement(ADeclarationStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationStatement(ADeclarationStatement node)
    {
        InADeclarationStatement(node);
        if(node.GetVarDec() != null)
        {
            node.GetVarDec().Apply(this);
        }
        OutADeclarationStatement(node);
    }
    public virtual void InACallStatement(ACallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutACallStatement(ACallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseACallStatement(ACallStatement node)
    {
        InACallStatement(node);
        if(node.GetFunctCall() != null)
        {
            node.GetFunctCall().Apply(this);
        }
        OutACallStatement(node);
    }
    public virtual void InAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        InAAssignmentStatement(node);
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        OutAAssignmentStatement(node);
    }
    public virtual void InAIfStatement(AIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStatement(AIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStatement(AIfStatement node)
    {
        InAIfStatement(node);
        if(node.GetIfStmt() != null)
        {
            node.GetIfStmt().Apply(this);
        }
        OutAIfStatement(node);
    }
    public virtual void InALoopStatement(ALoopStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutALoopStatement(ALoopStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseALoopStatement(ALoopStatement node)
    {
        InALoopStatement(node);
        if(node.GetLoopStmt() != null)
        {
            node.GetLoopStmt().Apply(this);
        }
        OutALoopStatement(node);
    }
    public virtual void InAVarDec(AVarDec node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarDec(AVarDec node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarDec(AVarDec node)
    {
        InAVarDec(node);
        if(node.GetSemiColon() != null)
        {
            node.GetSemiColon().Apply(this);
        }
        if(node.GetOptAssignment() != null)
        {
            node.GetOptAssignment().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetRwType() != null)
        {
            node.GetRwType().Apply(this);
        }
        OutAVarDec(node);
    }
    public virtual void InAOptForOptAssignment(AOptForOptAssignment node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOptForOptAssignment(AOptForOptAssignment node)
    {
        DefaultOut(node);
    }

    public override void CaseAOptForOptAssignment(AOptForOptAssignment node)
    {
        InAOptForOptAssignment(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        OutAOptForOptAssignment(node);
    }
    public virtual void InAOptAgainstOptAssignment(AOptAgainstOptAssignment node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOptAgainstOptAssignment(AOptAgainstOptAssignment node)
    {
        DefaultOut(node);
    }

    public override void CaseAOptAgainstOptAssignment(AOptAgainstOptAssignment node)
    {
        InAOptAgainstOptAssignment(node);
        OutAOptAgainstOptAssignment(node);
    }
    public virtual void InAFunctCall(AFunctCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctCall(AFunctCall node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctCall(AFunctCall node)
    {
        InAFunctCall(node);
        if(node.GetSemiColon() != null)
        {
            node.GetSemiColon().Apply(this);
        }
        if(node.GetRParen() != null)
        {
            node.GetRParen().Apply(this);
        }
        if(node.GetCallParams() != null)
        {
            node.GetCallParams().Apply(this);
        }
        if(node.GetLParen() != null)
        {
            node.GetLParen().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAFunctCall(node);
    }
    public virtual void InASomeCallParams(ASomeCallParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutASomeCallParams(ASomeCallParams node)
    {
        DefaultOut(node);
    }

    public override void CaseASomeCallParams(ASomeCallParams node)
    {
        InASomeCallParams(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetCallParams() != null)
        {
            node.GetCallParams().Apply(this);
        }
        OutASomeCallParams(node);
    }
    public virtual void InAOneCallParams(AOneCallParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneCallParams(AOneCallParams node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneCallParams(AOneCallParams node)
    {
        InAOneCallParams(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAOneCallParams(node);
    }
    public virtual void InANoneCallParams(ANoneCallParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneCallParams(ANoneCallParams node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneCallParams(ANoneCallParams node)
    {
        InANoneCallParams(node);
        OutANoneCallParams(node);
    }
    public virtual void InAAssignment(AAssignment node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignment(AAssignment node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignment(AAssignment node)
    {
        InAAssignment(node);
        if(node.GetSemiColon() != null)
        {
            node.GetSemiColon().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAAssignment(node);
    }
    public virtual void InAIfStmt(AIfStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStmt(AIfStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStmt(AIfStmt node)
    {
        InAIfStmt(node);
        if(node.GetElseStmt() != null)
        {
            node.GetElseStmt().Apply(this);
        }
        if(node.GetRBrace() != null)
        {
            node.GetRBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLBrace() != null)
        {
            node.GetLBrace().Apply(this);
        }
        if(node.GetRParen() != null)
        {
            node.GetRParen().Apply(this);
        }
        if(node.GetBoolExp() != null)
        {
            node.GetBoolExp().Apply(this);
        }
        if(node.GetLParen() != null)
        {
            node.GetLParen().Apply(this);
        }
        if(node.GetRwIf() != null)
        {
            node.GetRwIf().Apply(this);
        }
        OutAIfStmt(node);
    }
    public virtual void InAYesElseElseStmt(AYesElseElseStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAYesElseElseStmt(AYesElseElseStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAYesElseElseStmt(AYesElseElseStmt node)
    {
        InAYesElseElseStmt(node);
        if(node.GetRBrace() != null)
        {
            node.GetRBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLBrace() != null)
        {
            node.GetLBrace().Apply(this);
        }
        if(node.GetRwElse() != null)
        {
            node.GetRwElse().Apply(this);
        }
        OutAYesElseElseStmt(node);
    }
    public virtual void InANoElseElseStmt(ANoElseElseStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoElseElseStmt(ANoElseElseStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseANoElseElseStmt(ANoElseElseStmt node)
    {
        InANoElseElseStmt(node);
        OutANoElseElseStmt(node);
    }
    public virtual void InALoopStmt(ALoopStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutALoopStmt(ALoopStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseALoopStmt(ALoopStmt node)
    {
        InALoopStmt(node);
        if(node.GetRBrace() != null)
        {
            node.GetRBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLBrace() != null)
        {
            node.GetLBrace().Apply(this);
        }
        if(node.GetRParen() != null)
        {
            node.GetRParen().Apply(this);
        }
        if(node.GetBoolExp() != null)
        {
            node.GetBoolExp().Apply(this);
        }
        if(node.GetLParen() != null)
        {
            node.GetLParen().Apply(this);
        }
        if(node.GetRwWhile() != null)
        {
            node.GetRwWhile().Apply(this);
        }
        OutALoopStmt(node);
    }
}
} // namespace CS426.analysis
