/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;
using System.IO;
using CS426.node;
using CS426.lexer;
using CS426.analysis;

namespace CS426.parser {

public class ParserException : ApplicationException
{
    Token token;

    public ParserException(Token token, String  message) : base(message)
    {
        this.token = token;
    }

    public Token Token
    {
      get { return token; }
    }
}

internal class State
{
    internal int state;
    internal ArrayList nodes;

    internal State(int state, ArrayList nodes)
    {
        this.state = state;
        this.nodes = nodes;
    }
}

internal class TokenIndex : AnalysisAdapter
{
    internal int index;

    public override void CaseTAssign(TAssign node)
    {
        index = 0;
    }

    public override void CaseTPlusSign(TPlusSign node)
    {
        index = 1;
    }

    public override void CaseTStar(TStar node)
    {
        index = 2;
    }

    public override void CaseTSemiColon(TSemiColon node)
    {
        index = 3;
    }

    public override void CaseTLParen(TLParen node)
    {
        index = 4;
    }

    public override void CaseTRParen(TRParen node)
    {
        index = 5;
    }

    public override void CaseTMinusSign(TMinusSign node)
    {
        index = 6;
    }

    public override void CaseTSlash(TSlash node)
    {
        index = 7;
    }

    public override void CaseTLtSign(TLtSign node)
    {
        index = 8;
    }

    public override void CaseTLeqSign(TLeqSign node)
    {
        index = 9;
    }

    public override void CaseTGtSign(TGtSign node)
    {
        index = 10;
    }

    public override void CaseTGeqSign(TGeqSign node)
    {
        index = 11;
    }

    public override void CaseTEqSign(TEqSign node)
    {
        index = 12;
    }

    public override void CaseTNeqSign(TNeqSign node)
    {
        index = 13;
    }

    public override void CaseTNotSign(TNotSign node)
    {
        index = 14;
    }

    public override void CaseTAndSign(TAndSign node)
    {
        index = 15;
    }

    public override void CaseTOrSign(TOrSign node)
    {
        index = 16;
    }

    public override void CaseTLBrace(TLBrace node)
    {
        index = 17;
    }

    public override void CaseTRBrace(TRBrace node)
    {
        index = 18;
    }

    public override void CaseTComma(TComma node)
    {
        index = 19;
    }

    public override void CaseTRwType(TRwType node)
    {
        index = 20;
    }

    public override void CaseTRwIf(TRwIf node)
    {
        index = 21;
    }

    public override void CaseTRwElse(TRwElse node)
    {
        index = 22;
    }

    public override void CaseTRwWhile(TRwWhile node)
    {
        index = 23;
    }

    public override void CaseTRwConst(TRwConst node)
    {
        index = 24;
    }

    public override void CaseTRwFunction(TRwFunction node)
    {
        index = 25;
    }

    public override void CaseTRwMain(TRwMain node)
    {
        index = 26;
    }

    public override void CaseTLitInteger(TLitInteger node)
    {
        index = 27;
    }

    public override void CaseTLitFloat(TLitFloat node)
    {
        index = 28;
    }

    public override void CaseTLitStr(TLitStr node)
    {
        index = 29;
    }

    public override void CaseTId(TId node)
    {
        index = 30;
    }

    public override void CaseEOF(EOF node)
    {
        index = 31;
    }
}

public class Parser
{
    private Analysis ignoredTokens = new AnalysisAdapter();
    public Analysis IgnoredTokens
    {
      get { return ignoredTokens; }
    }

    protected ArrayList nodeList;

    private Lexer lexer;
    private Stack stack = new Stack();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private TokenIndex converter = new TokenIndex();
    private int[] action = new int[2];

    private const int SHIFT = 0;
    private const int REDUCE = 1;
    private const int ACCEPT = 2;
    private const int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;
    }

    private int GoTo(int index)
    {
        int state = State();
        int low = 1;
        int high = gotoTable[index].Length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void Push(int numstate, ArrayList listNode)
    {
        this.nodeList = listNode;

        stack.Push(new State(numstate, this.nodeList));
    }

    private int State()
    {
        State s = (State) stack.Peek();
        return s.state;
    }

    private ArrayList Pop()
    {
        return (ArrayList) ((State) stack.Pop()).nodes;
    }

    private int Index(Switchable token)
    {
        converter.index = -1;
        token.Apply(converter);
        return converter.index;
    }

    public Start Parse()
    {
        Push(0, null);

        IList ign = null;
        while(true)
        {
            while(Index(lexer.Peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedList(NodeCast.Instance);
                }

                ign.Add(lexer.Next());
            }

            if(ign != null)
            {
                ignoredTokens.SetIn(lexer.Peek(), ign);
                ign = null;
            }

            last_pos = lexer.Peek().Pos;
            last_line = lexer.Peek().Line;
            last_token = lexer.Peek();

            int index = Index(lexer.Peek());
            action[0] = actionTable[State()][0][1];
            action[1] = actionTable[State()][0][2];

            int low = 1;
            int high = actionTable[State()].Length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[State()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[State()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[State()][middle][1];
                    action[1] = actionTable[State()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
        {
            ArrayList list = new ArrayList();
            list.Add(lexer.Next());
                        Push(action[1], list);
                        last_shift = action[1];
                    }
        break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0:
        {
      ArrayList list = New0();
      Push(GoTo(0), list);
        }
        break;
                    case 1:
        {
      ArrayList list = New1();
      Push(GoTo(1), list);
        }
        break;
                    case 2:
        {
      ArrayList list = New2();
      Push(GoTo(1), list);
        }
        break;
                    case 3:
        {
      ArrayList list = New3();
      Push(GoTo(2), list);
        }
        break;
                    case 4:
        {
      ArrayList list = New4();
      Push(GoTo(2), list);
        }
        break;
                    case 5:
        {
      ArrayList list = New5();
      Push(GoTo(3), list);
        }
        break;
                    case 6:
        {
      ArrayList list = New6();
      Push(GoTo(4), list);
        }
        break;
                    case 7:
        {
      ArrayList list = New7();
      Push(GoTo(4), list);
        }
        break;
                    case 8:
        {
      ArrayList list = New8();
      Push(GoTo(5), list);
        }
        break;
                    case 9:
        {
      ArrayList list = New9();
      Push(GoTo(5), list);
        }
        break;
                    case 10:
        {
      ArrayList list = New10();
      Push(GoTo(6), list);
        }
        break;
                    case 11:
        {
      ArrayList list = New11();
      Push(GoTo(6), list);
        }
        break;
                    case 12:
        {
      ArrayList list = New12();
      Push(GoTo(7), list);
        }
        break;
                    case 13:
        {
      ArrayList list = New13();
      Push(GoTo(7), list);
        }
        break;
                    case 14:
        {
      ArrayList list = New14();
      Push(GoTo(7), list);
        }
        break;
                    case 15:
        {
      ArrayList list = New15();
      Push(GoTo(8), list);
        }
        break;
                    case 16:
        {
      ArrayList list = New16();
      Push(GoTo(8), list);
        }
        break;
                    case 17:
        {
      ArrayList list = New17();
      Push(GoTo(9), list);
        }
        break;
                    case 18:
        {
      ArrayList list = New18();
      Push(GoTo(9), list);
        }
        break;
                    case 19:
        {
      ArrayList list = New19();
      Push(GoTo(9), list);
        }
        break;
                    case 20:
        {
      ArrayList list = New20();
      Push(GoTo(9), list);
        }
        break;
                    case 21:
        {
      ArrayList list = New21();
      Push(GoTo(9), list);
        }
        break;
                    case 22:
        {
      ArrayList list = New22();
      Push(GoTo(9), list);
        }
        break;
                    case 23:
        {
      ArrayList list = New23();
      Push(GoTo(10), list);
        }
        break;
                    case 24:
        {
      ArrayList list = New24();
      Push(GoTo(10), list);
        }
        break;
                    case 25:
        {
      ArrayList list = New25();
      Push(GoTo(10), list);
        }
        break;
                    case 26:
        {
      ArrayList list = New26();
      Push(GoTo(11), list);
        }
        break;
                    case 27:
        {
      ArrayList list = New27();
      Push(GoTo(11), list);
        }
        break;
                    case 28:
        {
      ArrayList list = New28();
      Push(GoTo(11), list);
        }
        break;
                    case 29:
        {
      ArrayList list = New29();
      Push(GoTo(12), list);
        }
        break;
                    case 30:
        {
      ArrayList list = New30();
      Push(GoTo(12), list);
        }
        break;
                    case 31:
        {
      ArrayList list = New31();
      Push(GoTo(13), list);
        }
        break;
                    case 32:
        {
      ArrayList list = New32();
      Push(GoTo(13), list);
        }
        break;
                    case 33:
        {
      ArrayList list = New33();
      Push(GoTo(14), list);
        }
        break;
                    case 34:
        {
      ArrayList list = New34();
      Push(GoTo(14), list);
        }
        break;
                    case 35:
        {
      ArrayList list = New35();
      Push(GoTo(15), list);
        }
        break;
                    case 36:
        {
      ArrayList list = New36();
      Push(GoTo(15), list);
        }
        break;
                    case 37:
        {
      ArrayList list = New37();
      Push(GoTo(15), list);
        }
        break;
                    case 38:
        {
      ArrayList list = New38();
      Push(GoTo(16), list);
        }
        break;
                    case 39:
        {
      ArrayList list = New39();
      Push(GoTo(16), list);
        }
        break;
                    case 40:
        {
      ArrayList list = New40();
      Push(GoTo(16), list);
        }
        break;
                    case 41:
        {
      ArrayList list = New41();
      Push(GoTo(17), list);
        }
        break;
                    case 42:
        {
      ArrayList list = New42();
      Push(GoTo(18), list);
        }
        break;
                    case 43:
        {
      ArrayList list = New43();
      Push(GoTo(18), list);
        }
        break;
                    case 44:
        {
      ArrayList list = New44();
      Push(GoTo(19), list);
        }
        break;
                    case 45:
        {
      ArrayList list = New45();
      Push(GoTo(19), list);
        }
        break;
                    case 46:
        {
      ArrayList list = New46();
      Push(GoTo(19), list);
        }
        break;
                    case 47:
        {
      ArrayList list = New47();
      Push(GoTo(19), list);
        }
        break;
                    case 48:
        {
      ArrayList list = New48();
      Push(GoTo(19), list);
        }
        break;
                    case 49:
        {
      ArrayList list = New49();
      Push(GoTo(20), list);
        }
        break;
                    case 50:
        {
      ArrayList list = New50();
      Push(GoTo(21), list);
        }
        break;
                    case 51:
        {
      ArrayList list = New51();
      Push(GoTo(21), list);
        }
        break;
                    case 52:
        {
      ArrayList list = New52();
      Push(GoTo(22), list);
        }
        break;
                    case 53:
        {
      ArrayList list = New53();
      Push(GoTo(23), list);
        }
        break;
                    case 54:
        {
      ArrayList list = New54();
      Push(GoTo(23), list);
        }
        break;
                    case 55:
        {
      ArrayList list = New55();
      Push(GoTo(23), list);
        }
        break;
                    case 56:
        {
      ArrayList list = New56();
      Push(GoTo(24), list);
        }
        break;
                    case 57:
        {
      ArrayList list = New57();
      Push(GoTo(25), list);
        }
        break;
                    case 58:
        {
      ArrayList list = New58();
      Push(GoTo(26), list);
        }
        break;
                    case 59:
        {
      ArrayList list = New59();
      Push(GoTo(26), list);
        }
        break;
                    case 60:
        {
      ArrayList list = New60();
      Push(GoTo(27), list);
        }
        break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.Next();
                        PFile node1 = (PFile) ((ArrayList)Pop())[0];
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    ArrayList New0()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PConstDeclarations pconstdeclarationsNode2 = (PConstDeclarations)nodeArrayList1[0];
        PFunctDeclarations pfunctdeclarationsNode3 = (PFunctDeclarations)nodeArrayList2[0];
        PMainDeclaration pmaindeclarationNode4 = (PMainDeclaration)nodeArrayList3[0];
        AFile pfileNode1 = new AFile (
              pconstdeclarationsNode2,
              pfunctdeclarationsNode3,
              pmaindeclarationNode4
        );
        nodeList.Add(pfileNode1);
        return nodeList;
    }
    ArrayList New1()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TRwConst trwconstNode2 = (TRwConst)nodeArrayList1[0];
        TRwType trwtypeNode3 = (TRwType)nodeArrayList2[0];
        TId tidNode4 = (TId)nodeArrayList3[0];
        TAssign tassignNode5 = (TAssign)nodeArrayList4[0];
        PExpression pexpressionNode6 = (PExpression)nodeArrayList5[0];
        TSemiColon tsemicolonNode7 = (TSemiColon)nodeArrayList6[0];
        PConstDeclarations pconstdeclarationsNode8 = (PConstDeclarations)nodeArrayList7[0];
        ASomeConstDeclarations pconstdeclarationsNode1 = new ASomeConstDeclarations (
              trwconstNode2,
              trwtypeNode3,
              tidNode4,
              tassignNode5,
              pexpressionNode6,
              tsemicolonNode7,
              pconstdeclarationsNode8
        );
        nodeList.Add(pconstdeclarationsNode1);
        return nodeList;
    }
    ArrayList New2()
    {
        ArrayList nodeList = new ArrayList();
        ANoneConstDeclarations pconstdeclarationsNode1 = new ANoneConstDeclarations (
        );
        nodeList.Add(pconstdeclarationsNode1);
        return nodeList;
    }
    ArrayList New3()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList9 = (ArrayList) Pop();
        ArrayList nodeArrayList8 = (ArrayList) Pop();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PFunctDeclarations pfunctdeclarationsNode2 = (PFunctDeclarations)nodeArrayList1[0];
        TRwFunction trwfunctionNode3 = (TRwFunction)nodeArrayList2[0];
        TId tidNode4 = (TId)nodeArrayList3[0];
        TLParen tlparenNode5 = (TLParen)nodeArrayList4[0];
        PParamDeclarations pparamdeclarationsNode6 = (PParamDeclarations)nodeArrayList5[0];
        TRParen trparenNode7 = (TRParen)nodeArrayList6[0];
        TLBrace tlbraceNode8 = (TLBrace)nodeArrayList7[0];
        PStatements pstatementsNode9 = (PStatements)nodeArrayList8[0];
        TRBrace trbraceNode10 = (TRBrace)nodeArrayList9[0];
        ASomeFunctDeclarations pfunctdeclarationsNode1 = new ASomeFunctDeclarations (
              pfunctdeclarationsNode2,
              trwfunctionNode3,
              tidNode4,
              tlparenNode5,
              pparamdeclarationsNode6,
              trparenNode7,
              tlbraceNode8,
              pstatementsNode9,
              trbraceNode10
        );
        nodeList.Add(pfunctdeclarationsNode1);
        return nodeList;
    }
    ArrayList New4()
    {
        ArrayList nodeList = new ArrayList();
        ANoneFunctDeclarations pfunctdeclarationsNode1 = new ANoneFunctDeclarations (
        );
        nodeList.Add(pfunctdeclarationsNode1);
        return nodeList;
    }
    ArrayList New5()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TRwFunction trwfunctionNode2 = (TRwFunction)nodeArrayList1[0];
        TRwMain trwmainNode3 = (TRwMain)nodeArrayList2[0];
        TLParen tlparenNode4 = (TLParen)nodeArrayList3[0];
        TRParen trparenNode5 = (TRParen)nodeArrayList4[0];
        TLBrace tlbraceNode6 = (TLBrace)nodeArrayList5[0];
        PStatements pstatementsNode7 = (PStatements)nodeArrayList6[0];
        TRBrace trbraceNode8 = (TRBrace)nodeArrayList7[0];
        AMainDeclaration pmaindeclarationNode1 = new AMainDeclaration (
              trwfunctionNode2,
              trwmainNode3,
              tlparenNode4,
              trparenNode5,
              tlbraceNode6,
              pstatementsNode7,
              trbraceNode8
        );
        nodeList.Add(pmaindeclarationNode1);
        return nodeList;
    }
    ArrayList New6()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PBoolExp pboolexpNode2 = (PBoolExp)nodeArrayList1[0];
        TOrSign torsignNode3 = (TOrSign)nodeArrayList2[0];
        PBoolTerm pbooltermNode4 = (PBoolTerm)nodeArrayList3[0];
        AMultBoolExp pboolexpNode1 = new AMultBoolExp (
              pboolexpNode2,
              torsignNode3,
              pbooltermNode4
        );
        nodeList.Add(pboolexpNode1);
        return nodeList;
    }
    ArrayList New7()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PBoolTerm pbooltermNode2 = (PBoolTerm)nodeArrayList1[0];
        ASingleBoolExp pboolexpNode1 = new ASingleBoolExp (
              pbooltermNode2
        );
        nodeList.Add(pboolexpNode1);
        return nodeList;
    }
    ArrayList New8()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PBoolTerm pbooltermNode2 = (PBoolTerm)nodeArrayList1[0];
        TAndSign tandsignNode3 = (TAndSign)nodeArrayList2[0];
        PBoolNot pboolnotNode4 = (PBoolNot)nodeArrayList3[0];
        AMultBoolTerm pbooltermNode1 = new AMultBoolTerm (
              pbooltermNode2,
              tandsignNode3,
              pboolnotNode4
        );
        nodeList.Add(pbooltermNode1);
        return nodeList;
    }
    ArrayList New9()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PBoolNot pboolnotNode2 = (PBoolNot)nodeArrayList1[0];
        ASingleBoolTerm pbooltermNode1 = new ASingleBoolTerm (
              pboolnotNode2
        );
        nodeList.Add(pbooltermNode1);
        return nodeList;
    }
    ArrayList New10()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TNotSign tnotsignNode2 = (TNotSign)nodeArrayList1[0];
        PBoolComp pboolcompNode3 = (PBoolComp)nodeArrayList2[0];
        ANegBoolNot pboolnotNode1 = new ANegBoolNot (
              tnotsignNode2,
              pboolcompNode3
        );
        nodeList.Add(pboolnotNode1);
        return nodeList;
    }
    ArrayList New11()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PBoolComp pboolcompNode2 = (PBoolComp)nodeArrayList1[0];
        APosBoolNot pboolnotNode1 = new APosBoolNot (
              pboolcompNode2
        );
        nodeList.Add(pboolnotNode1);
        return nodeList;
    }
    ArrayList New12()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PBoolComp pboolcompNode2 = (PBoolComp)nodeArrayList1[0];
        TEqSign teqsignNode3 = (TEqSign)nodeArrayList2[0];
        PBoolParens pboolparensNode4 = (PBoolParens)nodeArrayList3[0];
        AEqualBoolComp pboolcompNode1 = new AEqualBoolComp (
              pboolcompNode2,
              teqsignNode3,
              pboolparensNode4
        );
        nodeList.Add(pboolcompNode1);
        return nodeList;
    }
    ArrayList New13()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PBoolComp pboolcompNode2 = (PBoolComp)nodeArrayList1[0];
        TNeqSign tneqsignNode3 = (TNeqSign)nodeArrayList2[0];
        PBoolParens pboolparensNode4 = (PBoolParens)nodeArrayList3[0];
        ANotEqualBoolComp pboolcompNode1 = new ANotEqualBoolComp (
              pboolcompNode2,
              tneqsignNode3,
              pboolparensNode4
        );
        nodeList.Add(pboolcompNode1);
        return nodeList;
    }
    ArrayList New14()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PBoolParens pboolparensNode2 = (PBoolParens)nodeArrayList1[0];
        ASoloBoolComp pboolcompNode1 = new ASoloBoolComp (
              pboolparensNode2
        );
        nodeList.Add(pboolcompNode1);
        return nodeList;
    }
    ArrayList New15()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TLParen tlparenNode2 = (TLParen)nodeArrayList1[0];
        PBoolExp pboolexpNode3 = (PBoolExp)nodeArrayList2[0];
        TRParen trparenNode4 = (TRParen)nodeArrayList3[0];
        ASomeBoolParens pboolparensNode1 = new ASomeBoolParens (
              tlparenNode2,
              pboolexpNode3,
              trparenNode4
        );
        nodeList.Add(pboolparensNode1);
        return nodeList;
    }
    ArrayList New16()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PNumComp pnumcompNode2 = (PNumComp)nodeArrayList1[0];
        ANoneBoolParens pboolparensNode1 = new ANoneBoolParens (
              pnumcompNode2
        );
        nodeList.Add(pboolparensNode1);
        return nodeList;
    }
    ArrayList New17()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        TLtSign tltsignNode3 = (TLtSign)nodeArrayList2[0];
        PExpression pexpressionNode4 = (PExpression)nodeArrayList3[0];
        ALessNumComp pnumcompNode1 = new ALessNumComp (
              pexpressionNode2,
              tltsignNode3,
              pexpressionNode4
        );
        nodeList.Add(pnumcompNode1);
        return nodeList;
    }
    ArrayList New18()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        TLeqSign tleqsignNode3 = (TLeqSign)nodeArrayList2[0];
        PExpression pexpressionNode4 = (PExpression)nodeArrayList3[0];
        ALessEqualNumComp pnumcompNode1 = new ALessEqualNumComp (
              pexpressionNode2,
              tleqsignNode3,
              pexpressionNode4
        );
        nodeList.Add(pnumcompNode1);
        return nodeList;
    }
    ArrayList New19()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        TGtSign tgtsignNode3 = (TGtSign)nodeArrayList2[0];
        PExpression pexpressionNode4 = (PExpression)nodeArrayList3[0];
        AGreaterNumComp pnumcompNode1 = new AGreaterNumComp (
              pexpressionNode2,
              tgtsignNode3,
              pexpressionNode4
        );
        nodeList.Add(pnumcompNode1);
        return nodeList;
    }
    ArrayList New20()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        TGeqSign tgeqsignNode3 = (TGeqSign)nodeArrayList2[0];
        PExpression pexpressionNode4 = (PExpression)nodeArrayList3[0];
        AGreaterEqualNumComp pnumcompNode1 = new AGreaterEqualNumComp (
              pexpressionNode2,
              tgeqsignNode3,
              pexpressionNode4
        );
        nodeList.Add(pnumcompNode1);
        return nodeList;
    }
    ArrayList New21()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        TEqSign teqsignNode3 = (TEqSign)nodeArrayList2[0];
        PExpression pexpressionNode4 = (PExpression)nodeArrayList3[0];
        AEqualNumComp pnumcompNode1 = new AEqualNumComp (
              pexpressionNode2,
              teqsignNode3,
              pexpressionNode4
        );
        nodeList.Add(pnumcompNode1);
        return nodeList;
    }
    ArrayList New22()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        TNeqSign tneqsignNode3 = (TNeqSign)nodeArrayList2[0];
        PExpression pexpressionNode4 = (PExpression)nodeArrayList3[0];
        ANotEqualNumComp pnumcompNode1 = new ANotEqualNumComp (
              pexpressionNode2,
              tneqsignNode3,
              pexpressionNode4
        );
        nodeList.Add(pnumcompNode1);
        return nodeList;
    }
    ArrayList New23()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        TPlusSign tplussignNode3 = (TPlusSign)nodeArrayList2[0];
        PTerm ptermNode4 = (PTerm)nodeArrayList3[0];
        APlusExpression pexpressionNode1 = new APlusExpression (
              pexpressionNode2,
              tplussignNode3,
              ptermNode4
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New24()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        TMinusSign tminussignNode3 = (TMinusSign)nodeArrayList2[0];
        PTerm ptermNode4 = (PTerm)nodeArrayList3[0];
        AMinusExpression pexpressionNode1 = new AMinusExpression (
              pexpressionNode2,
              tminussignNode3,
              ptermNode4
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New25()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PTerm ptermNode2 = (PTerm)nodeArrayList1[0];
        ASoloExpression pexpressionNode1 = new ASoloExpression (
              ptermNode2
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New26()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PTerm ptermNode2 = (PTerm)nodeArrayList1[0];
        TStar tstarNode3 = (TStar)nodeArrayList2[0];
        PNegation pnegationNode4 = (PNegation)nodeArrayList3[0];
        AMultTerm ptermNode1 = new AMultTerm (
              ptermNode2,
              tstarNode3,
              pnegationNode4
        );
        nodeList.Add(ptermNode1);
        return nodeList;
    }
    ArrayList New27()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PTerm ptermNode2 = (PTerm)nodeArrayList1[0];
        TSlash tslashNode3 = (TSlash)nodeArrayList2[0];
        PNegation pnegationNode4 = (PNegation)nodeArrayList3[0];
        ADivTerm ptermNode1 = new ADivTerm (
              ptermNode2,
              tslashNode3,
              pnegationNode4
        );
        nodeList.Add(ptermNode1);
        return nodeList;
    }
    ArrayList New28()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PNegation pnegationNode2 = (PNegation)nodeArrayList1[0];
        ASingleTerm ptermNode1 = new ASingleTerm (
              pnegationNode2
        );
        nodeList.Add(ptermNode1);
        return nodeList;
    }
    ArrayList New29()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TMinusSign tminussignNode2 = (TMinusSign)nodeArrayList1[0];
        PParentheticalExp pparentheticalexpNode3 = (PParentheticalExp)nodeArrayList2[0];
        ANegNegation pnegationNode1 = new ANegNegation (
              tminussignNode2,
              pparentheticalexpNode3
        );
        nodeList.Add(pnegationNode1);
        return nodeList;
    }
    ArrayList New30()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PParentheticalExp pparentheticalexpNode2 = (PParentheticalExp)nodeArrayList1[0];
        APosNegation pnegationNode1 = new APosNegation (
              pparentheticalexpNode2
        );
        nodeList.Add(pnegationNode1);
        return nodeList;
    }
    ArrayList New31()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TLParen tlparenNode2 = (TLParen)nodeArrayList1[0];
        PExpression pexpressionNode3 = (PExpression)nodeArrayList2[0];
        TRParen trparenNode4 = (TRParen)nodeArrayList3[0];
        ASomeParentheticalExp pparentheticalexpNode1 = new ASomeParentheticalExp (
              tlparenNode2,
              pexpressionNode3,
              trparenNode4
        );
        nodeList.Add(pparentheticalexpNode1);
        return nodeList;
    }
    ArrayList New32()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        POperand poperandNode2 = (POperand)nodeArrayList1[0];
        ANoneParentheticalExp pparentheticalexpNode1 = new ANoneParentheticalExp (
              poperandNode2
        );
        nodeList.Add(pparentheticalexpNode1);
        return nodeList;
    }
    ArrayList New33()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        AVarOperand poperandNode1 = new AVarOperand (
              tidNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New34()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PLiteral pliteralNode2 = (PLiteral)nodeArrayList1[0];
        ALitOperand poperandNode1 = new ALitOperand (
              pliteralNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New35()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TLitInteger tlitintegerNode2 = (TLitInteger)nodeArrayList1[0];
        AIntLiteral pliteralNode1 = new AIntLiteral (
              tlitintegerNode2
        );
        nodeList.Add(pliteralNode1);
        return nodeList;
    }
    ArrayList New36()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TLitFloat tlitfloatNode2 = (TLitFloat)nodeArrayList1[0];
        AFloatLiteral pliteralNode1 = new AFloatLiteral (
              tlitfloatNode2
        );
        nodeList.Add(pliteralNode1);
        return nodeList;
    }
    ArrayList New37()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TLitStr tlitstrNode2 = (TLitStr)nodeArrayList1[0];
        AStrLiteral pliteralNode1 = new AStrLiteral (
              tlitstrNode2
        );
        nodeList.Add(pliteralNode1);
        return nodeList;
    }
    ArrayList New38()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PParamDeclarations pparamdeclarationsNode2 = (PParamDeclarations)nodeArrayList1[0];
        TComma tcommaNode3 = (TComma)nodeArrayList2[0];
        PParamDeclaration pparamdeclarationNode4 = (PParamDeclaration)nodeArrayList3[0];
        ASomeParamDeclarations pparamdeclarationsNode1 = new ASomeParamDeclarations (
              pparamdeclarationsNode2,
              tcommaNode3,
              pparamdeclarationNode4
        );
        nodeList.Add(pparamdeclarationsNode1);
        return nodeList;
    }
    ArrayList New39()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PParamDeclaration pparamdeclarationNode2 = (PParamDeclaration)nodeArrayList1[0];
        AOneParamDeclarations pparamdeclarationsNode1 = new AOneParamDeclarations (
              pparamdeclarationNode2
        );
        nodeList.Add(pparamdeclarationsNode1);
        return nodeList;
    }
    ArrayList New40()
    {
        ArrayList nodeList = new ArrayList();
        ANoneParamDeclarations pparamdeclarationsNode1 = new ANoneParamDeclarations (
        );
        nodeList.Add(pparamdeclarationsNode1);
        return nodeList;
    }
    ArrayList New41()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TRwType trwtypeNode2 = (TRwType)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        AParamDeclaration pparamdeclarationNode1 = new AParamDeclaration (
              trwtypeNode2,
              tidNode3
        );
        nodeList.Add(pparamdeclarationNode1);
        return nodeList;
    }
    ArrayList New42()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PStatements pstatementsNode2 = (PStatements)nodeArrayList1[0];
        PStatement pstatementNode3 = (PStatement)nodeArrayList2[0];
        ASomeStatements pstatementsNode1 = new ASomeStatements (
              pstatementsNode2,
              pstatementNode3
        );
        nodeList.Add(pstatementsNode1);
        return nodeList;
    }
    ArrayList New43()
    {
        ArrayList nodeList = new ArrayList();
        ANoneStatements pstatementsNode1 = new ANoneStatements (
        );
        nodeList.Add(pstatementsNode1);
        return nodeList;
    }
    ArrayList New44()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PVarDec pvardecNode2 = (PVarDec)nodeArrayList1[0];
        ADeclarationStatement pstatementNode1 = new ADeclarationStatement (
              pvardecNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New45()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PFunctCall pfunctcallNode2 = (PFunctCall)nodeArrayList1[0];
        ACallStatement pstatementNode1 = new ACallStatement (
              pfunctcallNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New46()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PAssignment passignmentNode2 = (PAssignment)nodeArrayList1[0];
        AAssignmentStatement pstatementNode1 = new AAssignmentStatement (
              passignmentNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New47()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PIfStmt pifstmtNode2 = (PIfStmt)nodeArrayList1[0];
        AIfStatement pstatementNode1 = new AIfStatement (
              pifstmtNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New48()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PLoopStmt ploopstmtNode2 = (PLoopStmt)nodeArrayList1[0];
        ALoopStatement pstatementNode1 = new ALoopStatement (
              ploopstmtNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New49()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TRwType trwtypeNode2 = (TRwType)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        POptAssignment poptassignmentNode4 = (POptAssignment)nodeArrayList3[0];
        TSemiColon tsemicolonNode5 = (TSemiColon)nodeArrayList4[0];
        AVarDec pvardecNode1 = new AVarDec (
              trwtypeNode2,
              tidNode3,
              poptassignmentNode4,
              tsemicolonNode5
        );
        nodeList.Add(pvardecNode1);
        return nodeList;
    }
    ArrayList New50()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TAssign tassignNode2 = (TAssign)nodeArrayList1[0];
        PExpression pexpressionNode3 = (PExpression)nodeArrayList2[0];
        AOptForOptAssignment poptassignmentNode1 = new AOptForOptAssignment (
              tassignNode2,
              pexpressionNode3
        );
        nodeList.Add(poptassignmentNode1);
        return nodeList;
    }
    ArrayList New51()
    {
        ArrayList nodeList = new ArrayList();
        AOptAgainstOptAssignment poptassignmentNode1 = new AOptAgainstOptAssignment (
        );
        nodeList.Add(poptassignmentNode1);
        return nodeList;
    }
    ArrayList New52()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TLParen tlparenNode3 = (TLParen)nodeArrayList2[0];
        PCallParams pcallparamsNode4 = (PCallParams)nodeArrayList3[0];
        TRParen trparenNode5 = (TRParen)nodeArrayList4[0];
        TSemiColon tsemicolonNode6 = (TSemiColon)nodeArrayList5[0];
        AFunctCall pfunctcallNode1 = new AFunctCall (
              tidNode2,
              tlparenNode3,
              pcallparamsNode4,
              trparenNode5,
              tsemicolonNode6
        );
        nodeList.Add(pfunctcallNode1);
        return nodeList;
    }
    ArrayList New53()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PCallParams pcallparamsNode2 = (PCallParams)nodeArrayList1[0];
        TComma tcommaNode3 = (TComma)nodeArrayList2[0];
        PExpression pexpressionNode4 = (PExpression)nodeArrayList3[0];
        ASomeCallParams pcallparamsNode1 = new ASomeCallParams (
              pcallparamsNode2,
              tcommaNode3,
              pexpressionNode4
        );
        nodeList.Add(pcallparamsNode1);
        return nodeList;
    }
    ArrayList New54()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        AOneCallParams pcallparamsNode1 = new AOneCallParams (
              pexpressionNode2
        );
        nodeList.Add(pcallparamsNode1);
        return nodeList;
    }
    ArrayList New55()
    {
        ArrayList nodeList = new ArrayList();
        ANoneCallParams pcallparamsNode1 = new ANoneCallParams (
        );
        nodeList.Add(pcallparamsNode1);
        return nodeList;
    }
    ArrayList New56()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TAssign tassignNode3 = (TAssign)nodeArrayList2[0];
        PExpression pexpressionNode4 = (PExpression)nodeArrayList3[0];
        TSemiColon tsemicolonNode5 = (TSemiColon)nodeArrayList4[0];
        AAssignment passignmentNode1 = new AAssignment (
              tidNode2,
              tassignNode3,
              pexpressionNode4,
              tsemicolonNode5
        );
        nodeList.Add(passignmentNode1);
        return nodeList;
    }
    ArrayList New57()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList8 = (ArrayList) Pop();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TRwIf trwifNode2 = (TRwIf)nodeArrayList1[0];
        TLParen tlparenNode3 = (TLParen)nodeArrayList2[0];
        PBoolExp pboolexpNode4 = (PBoolExp)nodeArrayList3[0];
        TRParen trparenNode5 = (TRParen)nodeArrayList4[0];
        TLBrace tlbraceNode6 = (TLBrace)nodeArrayList5[0];
        PStatements pstatementsNode7 = (PStatements)nodeArrayList6[0];
        TRBrace trbraceNode8 = (TRBrace)nodeArrayList7[0];
        PElseStmt pelsestmtNode9 = (PElseStmt)nodeArrayList8[0];
        AIfStmt pifstmtNode1 = new AIfStmt (
              trwifNode2,
              tlparenNode3,
              pboolexpNode4,
              trparenNode5,
              tlbraceNode6,
              pstatementsNode7,
              trbraceNode8,
              pelsestmtNode9
        );
        nodeList.Add(pifstmtNode1);
        return nodeList;
    }
    ArrayList New58()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TRwElse trwelseNode2 = (TRwElse)nodeArrayList1[0];
        TLBrace tlbraceNode3 = (TLBrace)nodeArrayList2[0];
        PStatements pstatementsNode4 = (PStatements)nodeArrayList3[0];
        TRBrace trbraceNode5 = (TRBrace)nodeArrayList4[0];
        AYesElseElseStmt pelsestmtNode1 = new AYesElseElseStmt (
              trwelseNode2,
              tlbraceNode3,
              pstatementsNode4,
              trbraceNode5
        );
        nodeList.Add(pelsestmtNode1);
        return nodeList;
    }
    ArrayList New59()
    {
        ArrayList nodeList = new ArrayList();
        ANoElseElseStmt pelsestmtNode1 = new ANoElseElseStmt (
        );
        nodeList.Add(pelsestmtNode1);
        return nodeList;
    }
    ArrayList New60()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TRwWhile trwwhileNode2 = (TRwWhile)nodeArrayList1[0];
        TLParen tlparenNode3 = (TLParen)nodeArrayList2[0];
        PBoolExp pboolexpNode4 = (PBoolExp)nodeArrayList3[0];
        TRParen trparenNode5 = (TRParen)nodeArrayList4[0];
        TLBrace tlbraceNode6 = (TLBrace)nodeArrayList5[0];
        PStatements pstatementsNode7 = (PStatements)nodeArrayList6[0];
        TRBrace trbraceNode8 = (TRBrace)nodeArrayList7[0];
        ALoopStmt ploopstmtNode1 = new ALoopStmt (
              trwwhileNode2,
              tlparenNode3,
              pboolexpNode4,
              trparenNode5,
              tlbraceNode6,
              pstatementsNode7,
              trbraceNode8
        );
        nodeList.Add(ploopstmtNode1);
        return nodeList;
    }

    private static int[][][] actionTable = {
      new int[][] {
        new int[] {-1, 1, 2},
        new int[] {24, 0, 1},
      },
      new int[][] {
        new int[] {-1, 3, 1},
        new int[] {20, 0, 4},
      },
      new int[][] {
        new int[] {-1, 3, 2},
        new int[] {31, 2, -1},
      },
      new int[][] {
        new int[] {-1, 1, 4},
      },
      new int[][] {
        new int[] {-1, 3, 4},
        new int[] {30, 0, 6},
      },
      new int[][] {
        new int[] {-1, 3, 5},
        new int[] {25, 0, 7},
      },
      new int[][] {
        new int[] {-1, 3, 6},
        new int[] {0, 0, 9},
      },
      new int[][] {
        new int[] {-1, 3, 7},
        new int[] {26, 0, 10},
        new int[] {30, 0, 11},
      },
      new int[][] {
        new int[] {-1, 1, 0},
      },
      new int[][] {
        new int[] {-1, 3, 9},
        new int[] {4, 0, 12},
        new int[] {6, 0, 13},
        new int[] {27, 0, 14},
        new int[] {28, 0, 15},
        new int[] {29, 0, 16},
        new int[] {30, 0, 17},
      },
      new int[][] {
        new int[] {-1, 3, 10},
        new int[] {4, 0, 24},
      },
      new int[][] {
        new int[] {-1, 3, 11},
        new int[] {4, 0, 25},
      },
      new int[][] {
        new int[] {-1, 3, 12},
        new int[] {4, 0, 12},
        new int[] {6, 0, 13},
        new int[] {27, 0, 14},
        new int[] {28, 0, 15},
        new int[] {29, 0, 16},
        new int[] {30, 0, 17},
      },
      new int[][] {
        new int[] {-1, 3, 13},
        new int[] {4, 0, 12},
        new int[] {27, 0, 14},
        new int[] {28, 0, 15},
        new int[] {29, 0, 16},
        new int[] {30, 0, 17},
      },
      new int[][] {
        new int[] {-1, 1, 35},
      },
      new int[][] {
        new int[] {-1, 1, 36},
      },
      new int[][] {
        new int[] {-1, 1, 37},
      },
      new int[][] {
        new int[] {-1, 1, 33},
      },
      new int[][] {
        new int[] {-1, 3, 18},
        new int[] {1, 0, 28},
        new int[] {3, 0, 29},
        new int[] {6, 0, 30},
      },
      new int[][] {
        new int[] {-1, 1, 25},
        new int[] {2, 0, 31},
        new int[] {7, 0, 32},
      },
      new int[][] {
        new int[] {-1, 1, 28},
      },
      new int[][] {
        new int[] {-1, 1, 30},
      },
      new int[][] {
        new int[] {-1, 1, 32},
      },
      new int[][] {
        new int[] {-1, 1, 34},
      },
      new int[][] {
        new int[] {-1, 3, 24},
        new int[] {5, 0, 33},
      },
      new int[][] {
        new int[] {-1, 1, 40},
        new int[] {20, 0, 34},
      },
      new int[][] {
        new int[] {-1, 3, 26},
        new int[] {1, 0, 28},
        new int[] {5, 0, 37},
        new int[] {6, 0, 30},
      },
      new int[][] {
        new int[] {-1, 1, 29},
      },
      new int[][] {
        new int[] {-1, 3, 28},
        new int[] {4, 0, 12},
        new int[] {6, 0, 13},
        new int[] {27, 0, 14},
        new int[] {28, 0, 15},
        new int[] {29, 0, 16},
        new int[] {30, 0, 17},
      },
      new int[][] {
        new int[] {-1, 1, 2},
        new int[] {24, 0, 1},
      },
      new int[][] {
        new int[] {-1, 3, 30},
        new int[] {4, 0, 12},
        new int[] {6, 0, 13},
        new int[] {27, 0, 14},
        new int[] {28, 0, 15},
        new int[] {29, 0, 16},
        new int[] {30, 0, 17},
      },
      new int[][] {
        new int[] {-1, 3, 31},
        new int[] {4, 0, 12},
        new int[] {6, 0, 13},
        new int[] {27, 0, 14},
        new int[] {28, 0, 15},
        new int[] {29, 0, 16},
        new int[] {30, 0, 17},
      },
      new int[][] {
        new int[] {-1, 3, 32},
        new int[] {4, 0, 12},
        new int[] {6, 0, 13},
        new int[] {27, 0, 14},
        new int[] {28, 0, 15},
        new int[] {29, 0, 16},
        new int[] {30, 0, 17},
      },
      new int[][] {
        new int[] {-1, 3, 33},
        new int[] {17, 0, 43},
      },
      new int[][] {
        new int[] {-1, 3, 34},
        new int[] {30, 0, 44},
      },
      new int[][] {
        new int[] {-1, 3, 35},
        new int[] {5, 0, 45},
        new int[] {19, 0, 46},
      },
      new int[][] {
        new int[] {-1, 1, 39},
      },
      new int[][] {
        new int[] {-1, 1, 31},
      },
      new int[][] {
        new int[] {-1, 1, 23},
        new int[] {2, 0, 31},
        new int[] {7, 0, 32},
      },
      new int[][] {
        new int[] {-1, 1, 1},
      },
      new int[][] {
        new int[] {-1, 1, 24},
        new int[] {2, 0, 31},
        new int[] {7, 0, 32},
      },
      new int[][] {
        new int[] {-1, 1, 26},
      },
      new int[][] {
        new int[] {-1, 1, 27},
      },
      new int[][] {
        new int[] {-1, 1, 43},
      },
      new int[][] {
        new int[] {-1, 1, 41},
      },
      new int[][] {
        new int[] {-1, 3, 45},
        new int[] {17, 0, 48},
      },
      new int[][] {
        new int[] {-1, 3, 46},
        new int[] {20, 0, 34},
      },
      new int[][] {
        new int[] {-1, 3, 47},
        new int[] {18, 0, 50},
        new int[] {20, 0, 51},
        new int[] {21, 0, 52},
        new int[] {23, 0, 53},
        new int[] {30, 0, 54},
      },
      new int[][] {
        new int[] {-1, 1, 43},
      },
      new int[][] {
        new int[] {-1, 1, 38},
      },
      new int[][] {
        new int[] {-1, 1, 5},
      },
      new int[][] {
        new int[] {-1, 3, 51},
        new int[] {30, 0, 62},
      },
      new int[][] {
        new int[] {-1, 3, 52},
        new int[] {4, 0, 63},
      },
      new int[][] {
        new int[] {-1, 3, 53},
        new int[] {4, 0, 64},
      },
      new int[][] {
        new int[] {-1, 3, 54},
        new int[] {0, 0, 65},
        new int[] {4, 0, 66},
      },
      new int[][] {
        new int[] {-1, 1, 42},
      },
      new int[][] {
        new int[] {-1, 1, 44},
      },
      new int[][] {
        new int[] {-1, 1, 45},
      },
      new int[][] {
        new int[] {-1, 1, 46},
      },
      new int[][] {
        new int[] {-1, 1, 47},
      },
      new int[][] {
        new int[] {-1, 1, 48},
      },
      new int[][] {
        new int[] {-1, 3, 61},
        new int[] {18, 0, 67},
        new int[] {20, 0, 51},
        new int[] {21, 0, 52},
        new int[] {23, 0, 53},
        new int[] {30, 0, 54},
      },
      new int[][] {
        new int[] {-1, 1, 51},
        new int[] {0, 0, 68},
      },
      new int[][] {
        new int[] {-1, 3, 63},
        new int[] {4, 0, 70},
        new int[] {6, 0, 13},
        new int[] {14, 0, 71},
        new int[] {27, 0, 14},
        new int[] {28, 0, 15},
        new int[] {29, 0, 16},
        new int[] {30, 0, 17},
      },
      new int[][] {
        new int[] {-1, 3, 64},
        new int[] {4, 0, 70},
        new int[] {6, 0, 13},
        new int[] {14, 0, 71},
        new int[] {27, 0, 14},
        new int[] {28, 0, 15},
        new int[] {29, 0, 16},
        new int[] {30, 0, 17},
      },
      new int[][] {
        new int[] {-1, 3, 65},
        new int[] {4, 0, 12},
        new int[] {6, 0, 13},
        new int[] {27, 0, 14},
        new int[] {28, 0, 15},
        new int[] {29, 0, 16},
        new int[] {30, 0, 17},
      },
      new int[][] {
        new int[] {-1, 1, 55},
        new int[] {4, 0, 12},
        new int[] {6, 0, 13},
        new int[] {27, 0, 14},
        new int[] {28, 0, 15},
        new int[] {29, 0, 16},
        new int[] {30, 0, 17},
      },
      new int[][] {
        new int[] {-1, 1, 3},
      },
      new int[][] {
        new int[] {-1, 3, 68},
        new int[] {4, 0, 12},
        new int[] {6, 0, 13},
        new int[] {27, 0, 14},
        new int[] {28, 0, 15},
        new int[] {29, 0, 16},
        new int[] {30, 0, 17},
      },
      new int[][] {
        new int[] {-1, 3, 69},
        new int[] {3, 0, 84},
      },
      new int[][] {
        new int[] {-1, 3, 70},
        new int[] {4, 0, 70},
        new int[] {6, 0, 13},
        new int[] {14, 0, 71},
        new int[] {27, 0, 14},
        new int[] {28, 0, 15},
        new int[] {29, 0, 16},
        new int[] {30, 0, 17},
      },
      new int[][] {
        new int[] {-1, 3, 71},
        new int[] {4, 0, 70},
        new int[] {6, 0, 13},
        new int[] {27, 0, 14},
        new int[] {28, 0, 15},
        new int[] {29, 0, 16},
        new int[] {30, 0, 17},
      },
      new int[][] {
        new int[] {-1, 3, 72},
        new int[] {5, 0, 88},
        new int[] {16, 0, 89},
      },
      new int[][] {
        new int[] {-1, 1, 7},
        new int[] {15, 0, 90},
      },
      new int[][] {
        new int[] {-1, 1, 9},
      },
      new int[][] {
        new int[] {-1, 1, 11},
        new int[] {12, 0, 91},
        new int[] {13, 0, 92},
      },
      new int[][] {
        new int[] {-1, 1, 14},
      },
      new int[][] {
        new int[] {-1, 1, 16},
      },
      new int[][] {
        new int[] {-1, 3, 78},
        new int[] {1, 0, 28},
        new int[] {6, 0, 30},
        new int[] {8, 0, 93},
        new int[] {9, 0, 94},
        new int[] {10, 0, 95},
        new int[] {11, 0, 96},
        new int[] {12, 0, 97},
        new int[] {13, 0, 98},
      },
      new int[][] {
        new int[] {-1, 3, 79},
        new int[] {5, 0, 99},
        new int[] {16, 0, 89},
      },
      new int[][] {
        new int[] {-1, 3, 80},
        new int[] {1, 0, 28},
        new int[] {3, 0, 100},
        new int[] {6, 0, 30},
      },
      new int[][] {
        new int[] {-1, 1, 54},
        new int[] {1, 0, 28},
        new int[] {6, 0, 30},
      },
      new int[][] {
        new int[] {-1, 3, 82},
        new int[] {5, 0, 101},
        new int[] {19, 0, 102},
      },
      new int[][] {
        new int[] {-1, 1, 50},
        new int[] {1, 0, 28},
        new int[] {6, 0, 30},
      },
      new int[][] {
        new int[] {-1, 1, 49},
      },
      new int[][] {
        new int[] {-1, 3, 85},
        new int[] {5, 0, 103},
        new int[] {16, 0, 89},
      },
      new int[][] {
        new int[] {-1, 3, 86},
        new int[] {1, 0, 28},
        new int[] {5, 0, 37},
        new int[] {6, 0, 30},
        new int[] {8, 0, 93},
        new int[] {9, 0, 94},
        new int[] {10, 0, 95},
        new int[] {11, 0, 96},
        new int[] {12, 0, 97},
        new int[] {13, 0, 98},
      },
      new int[][] {
        new int[] {-1, 1, 10},
        new int[] {12, 0, 91},
        new int[] {13, 0, 92},
      },
      new int[][] {
        new int[] {-1, 3, 88},
        new int[] {17, 0, 104},
      },
      new int[][] {
        new int[] {-1, 3, 89},
        new int[] {4, 0, 70},
        new int[] {6, 0, 13},
        new int[] {14, 0, 71},
        new int[] {27, 0, 14},
        new int[] {28, 0, 15},
        new int[] {29, 0, 16},
        new int[] {30, 0, 17},
      },
      new int[][] {
        new int[] {-1, 3, 90},
        new int[] {4, 0, 70},
        new int[] {6, 0, 13},
        new int[] {14, 0, 71},
        new int[] {27, 0, 14},
        new int[] {28, 0, 15},
        new int[] {29, 0, 16},
        new int[] {30, 0, 17},
      },
      new int[][] {
        new int[] {-1, 3, 91},
        new int[] {4, 0, 70},
        new int[] {6, 0, 13},
        new int[] {27, 0, 14},
        new int[] {28, 0, 15},
        new int[] {29, 0, 16},
        new int[] {30, 0, 17},
      },
      new int[][] {
        new int[] {-1, 3, 92},
        new int[] {4, 0, 70},
        new int[] {6, 0, 13},
        new int[] {27, 0, 14},
        new int[] {28, 0, 15},
        new int[] {29, 0, 16},
        new int[] {30, 0, 17},
      },
      new int[][] {
        new int[] {-1, 3, 93},
        new int[] {4, 0, 12},
        new int[] {6, 0, 13},
        new int[] {27, 0, 14},
        new int[] {28, 0, 15},
        new int[] {29, 0, 16},
        new int[] {30, 0, 17},
      },
      new int[][] {
        new int[] {-1, 3, 94},
        new int[] {4, 0, 12},
        new int[] {6, 0, 13},
        new int[] {27, 0, 14},
        new int[] {28, 0, 15},
        new int[] {29, 0, 16},
        new int[] {30, 0, 17},
      },
      new int[][] {
        new int[] {-1, 3, 95},
        new int[] {4, 0, 12},
        new int[] {6, 0, 13},
        new int[] {27, 0, 14},
        new int[] {28, 0, 15},
        new int[] {29, 0, 16},
        new int[] {30, 0, 17},
      },
      new int[][] {
        new int[] {-1, 3, 96},
        new int[] {4, 0, 12},
        new int[] {6, 0, 13},
        new int[] {27, 0, 14},
        new int[] {28, 0, 15},
        new int[] {29, 0, 16},
        new int[] {30, 0, 17},
      },
      new int[][] {
        new int[] {-1, 3, 97},
        new int[] {4, 0, 12},
        new int[] {6, 0, 13},
        new int[] {27, 0, 14},
        new int[] {28, 0, 15},
        new int[] {29, 0, 16},
        new int[] {30, 0, 17},
      },
      new int[][] {
        new int[] {-1, 3, 98},
        new int[] {4, 0, 12},
        new int[] {6, 0, 13},
        new int[] {27, 0, 14},
        new int[] {28, 0, 15},
        new int[] {29, 0, 16},
        new int[] {30, 0, 17},
      },
      new int[][] {
        new int[] {-1, 3, 99},
        new int[] {17, 0, 115},
      },
      new int[][] {
        new int[] {-1, 1, 56},
      },
      new int[][] {
        new int[] {-1, 3, 101},
        new int[] {3, 0, 116},
      },
      new int[][] {
        new int[] {-1, 3, 102},
        new int[] {4, 0, 12},
        new int[] {6, 0, 13},
        new int[] {27, 0, 14},
        new int[] {28, 0, 15},
        new int[] {29, 0, 16},
        new int[] {30, 0, 17},
      },
      new int[][] {
        new int[] {-1, 1, 15},
      },
      new int[][] {
        new int[] {-1, 1, 43},
      },
      new int[][] {
        new int[] {-1, 1, 6},
        new int[] {15, 0, 90},
      },
      new int[][] {
        new int[] {-1, 1, 8},
      },
      new int[][] {
        new int[] {-1, 1, 12},
      },
      new int[][] {
        new int[] {-1, 1, 13},
      },
      new int[][] {
        new int[] {-1, 1, 17},
        new int[] {1, 0, 28},
        new int[] {6, 0, 30},
      },
      new int[][] {
        new int[] {-1, 1, 18},
        new int[] {1, 0, 28},
        new int[] {6, 0, 30},
      },
      new int[][] {
        new int[] {-1, 1, 19},
        new int[] {1, 0, 28},
        new int[] {6, 0, 30},
      },
      new int[][] {
        new int[] {-1, 1, 20},
        new int[] {1, 0, 28},
        new int[] {6, 0, 30},
      },
      new int[][] {
        new int[] {-1, 1, 21},
        new int[] {1, 0, 28},
        new int[] {6, 0, 30},
      },
      new int[][] {
        new int[] {-1, 1, 22},
        new int[] {1, 0, 28},
        new int[] {6, 0, 30},
      },
      new int[][] {
        new int[] {-1, 1, 43},
      },
      new int[][] {
        new int[] {-1, 1, 52},
      },
      new int[][] {
        new int[] {-1, 1, 53},
        new int[] {1, 0, 28},
        new int[] {6, 0, 30},
      },
      new int[][] {
        new int[] {-1, 3, 118},
        new int[] {18, 0, 120},
        new int[] {20, 0, 51},
        new int[] {21, 0, 52},
        new int[] {23, 0, 53},
        new int[] {30, 0, 54},
      },
      new int[][] {
        new int[] {-1, 3, 119},
        new int[] {18, 0, 121},
        new int[] {20, 0, 51},
        new int[] {21, 0, 52},
        new int[] {23, 0, 53},
        new int[] {30, 0, 54},
      },
      new int[][] {
        new int[] {-1, 1, 59},
        new int[] {22, 0, 122},
      },
      new int[][] {
        new int[] {-1, 1, 60},
      },
      new int[][] {
        new int[] {-1, 3, 122},
        new int[] {17, 0, 124},
      },
      new int[][] {
        new int[] {-1, 1, 57},
      },
      new int[][] {
        new int[] {-1, 1, 43},
      },
      new int[][] {
        new int[] {-1, 3, 125},
        new int[] {18, 0, 126},
        new int[] {20, 0, 51},
        new int[] {21, 0, 52},
        new int[] {23, 0, 53},
        new int[] {30, 0, 54},
      },
      new int[][] {
        new int[] {-1, 1, 58},
      },
    };

    private static int[][][] gotoTable  = {
      new int[][] {
        new int[] {-1, 2},
      },
      new int[][] {
        new int[] {-1, 3},
        new int[] {29, 39},
      },
      new int[][] {
        new int[] {-1, 5},
      },
      new int[][] {
        new int[] {-1, 8},
      },
      new int[][] {
        new int[] {-1, 72},
        new int[] {64, 79},
        new int[] {70, 85},
      },
      new int[][] {
        new int[] {-1, 73},
        new int[] {89, 105},
      },
      new int[][] {
        new int[] {-1, 74},
        new int[] {90, 106},
      },
      new int[][] {
        new int[] {-1, 75},
        new int[] {71, 87},
      },
      new int[][] {
        new int[] {-1, 76},
        new int[] {91, 107},
        new int[] {92, 108},
      },
      new int[][] {
        new int[] {-1, 77},
      },
      new int[][] {
        new int[] {-1, 78},
        new int[] {9, 18},
        new int[] {12, 26},
        new int[] {65, 80},
        new int[] {66, 81},
        new int[] {68, 83},
        new int[] {70, 86},
        new int[] {93, 109},
        new int[] {94, 110},
        new int[] {95, 111},
        new int[] {96, 112},
        new int[] {97, 113},
        new int[] {98, 114},
        new int[] {102, 117},
      },
      new int[][] {
        new int[] {-1, 19},
        new int[] {28, 38},
        new int[] {30, 40},
      },
      new int[][] {
        new int[] {-1, 20},
        new int[] {31, 41},
        new int[] {32, 42},
      },
      new int[][] {
        new int[] {-1, 21},
        new int[] {13, 27},
      },
      new int[][] {
        new int[] {-1, 22},
      },
      new int[][] {
        new int[] {-1, 23},
      },
      new int[][] {
        new int[] {-1, 35},
      },
      new int[][] {
        new int[] {-1, 36},
        new int[] {46, 49},
      },
      new int[][] {
        new int[] {-1, 47},
        new int[] {48, 61},
        new int[] {104, 118},
        new int[] {115, 119},
        new int[] {124, 125},
      },
      new int[][] {
        new int[] {-1, 55},
      },
      new int[][] {
        new int[] {-1, 56},
      },
      new int[][] {
        new int[] {-1, 69},
      },
      new int[][] {
        new int[] {-1, 57},
      },
      new int[][] {
        new int[] {-1, 82},
      },
      new int[][] {
        new int[] {-1, 58},
      },
      new int[][] {
        new int[] {-1, 59},
      },
      new int[][] {
        new int[] {-1, 123},
      },
      new int[][] {
        new int[] {-1, 60},
      },
    };

    private static String[] errorMessages = {
      "expecting: 'const', 'function'",
      "expecting: rw type",
      "expecting: EOF",
      "expecting: 'function'",
      "expecting: id",
      "expecting: ':='",
      "expecting: 'main', id",
      "expecting: '(', '-', lit integer, lit float, lit str, id",
      "expecting: '('",
      "expecting: '(', lit integer, lit float, lit str, id",
      "expecting: '+', '*', ';', ')', '-', '/', '<', '<=', '>', '>=', '=', '!=', '&', '|', ','",
      "expecting: '+', ';', '-'",
      "expecting: ')'",
      "expecting: ')', ',', rw type",
      "expecting: '+', ')', '-'",
      "expecting: '{'",
      "expecting: ')', ','",
      "expecting: '}', rw type, 'if', 'while', id",
      "expecting: ':=', '('",
      "expecting: ':=', ';'",
      "expecting: '(', '-', '!', lit integer, lit float, lit str, id",
      "expecting: '(', ')', '-', ',', lit integer, lit float, lit str, id",
      "expecting: ';'",
      "expecting: ')', '|'",
      "expecting: ')', '&', '|'",
      "expecting: ')', '=', '!=', '&', '|'",
      "expecting: '+', '-', '<', '<=', '>', '>=', '=', '!='",
      "expecting: '+', ')', '-', ','",
      "expecting: '+', ')', '-', '<', '<=', '>', '>=', '=', '!='",
      "expecting: '+', ')', '-', '=', '!=', '&', '|'",
      "expecting: '}', rw type, 'if', 'else', 'while', id",
    };

    private static int[] errors = {
      0, 1, 2, 3, 4, 3, 5, 6, 2, 7, 8, 8, 7, 9, 10, 10, 
      10, 10, 11, 10, 10, 10, 10, 10, 12, 13, 14, 10, 7, 0, 7, 7, 
      7, 15, 4, 16, 16, 10, 10, 3, 10, 10, 10, 17, 16, 15, 1, 17, 
      17, 16, 2, 4, 8, 8, 18, 17, 17, 17, 17, 17, 17, 17, 19, 20, 
      20, 7, 21, 3, 7, 22, 20, 7, 23, 24, 24, 25, 25, 25, 26, 23, 
      11, 27, 16, 11, 17, 23, 28, 25, 15, 20, 20, 7, 7, 7, 7, 7, 
      7, 7, 7, 15, 17, 22, 7, 25, 17, 24, 24, 25, 25, 29, 29, 29, 
      29, 29, 29, 17, 17, 27, 17, 17, 30, 17, 15, 17, 17, 17, 17, 
    };
}
}
